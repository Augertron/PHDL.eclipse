/*
 * generated by Xtext
 */
package edu.byu.ee.phdl.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.resource.IContainer;
import org.eclipse.xtext.resource.IResourceDescriptions;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import com.google.inject.Inject;

import edu.byu.ee.phdl.phdl.Attr;
import edu.byu.ee.phdl.phdl.Connection;
import edu.byu.ee.phdl.phdl.ConnectionName;
import edu.byu.ee.phdl.phdl.Design;
import edu.byu.ee.phdl.phdl.DesignElement;
import edu.byu.ee.phdl.phdl.DeviceElement;
import edu.byu.ee.phdl.phdl.Instance;
import edu.byu.ee.phdl.phdl.NewAttr;
import edu.byu.ee.phdl.phdl.Pin;
import edu.byu.ee.phdl.phdl.RefAttr;
import edu.byu.ee.phdl.phdl.RefTail;
import edu.byu.ee.phdl.phdl.Referenceable;
import edu.byu.ee.phdl.phdl.SubAttr;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on how and when to use
 * it
 * 
 */
public class PhdlScopeProvider extends AbstractDeclarativeScopeProvider {

	@Inject
	IContainer.Manager containermanager;

	@Inject
	IResourceDescriptions resourceDescriptions;

	public IScope scope_ConnectionAssign_ref(DesignElement d, EReference ref) {
		List<Connection> connections = new ArrayList<Connection>();
		List<DesignElement> elements = ((Design) d.eContainer()).getElements();
		for (DesignElement element : elements) {
			if (element instanceof Connection && elements.indexOf(element) < elements.indexOf(d))
				connections.add((Connection) element);
		}
		List<ConnectionName> names = new ArrayList<ConnectionName>();
		for (Connection connection : connections) {
			for (ConnectionName name : connection.getNames())
				names.add(name);
		}
		return Scopes.scopeFor(names);
	}

	public IScope scope_ConnectionRef_ref(Design d, EReference ref) {
		List<Connection> connections = new ArrayList<Connection>();
		List<DesignElement> elements = d.getElements();
		for (DesignElement element : elements) {
			if (element instanceof Connection)
				connections.add((Connection) element);
		}
		List<ConnectionName> names = new ArrayList<ConnectionName>();
		for (Connection connection : connections) {
			for (ConnectionName name : connection.getNames())
				names.add(name);
		}
		return Scopes.scopeFor(names);
	}

	public IScope scope_ConnectionRef_ref(DesignElement d, EReference ref) {
		List<Connection> connections = new ArrayList<Connection>();
		List<DesignElement> elements = ((Design) d.eContainer()).getElements();
		for (DesignElement element : elements) {
			if (element instanceof Connection && elements.indexOf(element) < elements.indexOf(d))
				connections.add((Connection) element);
		}
		List<ConnectionName> names = new ArrayList<ConnectionName>();
		for (Connection connection : connections) {
			for (ConnectionName name : connection.getNames())
				names.add(name);
		}
		return Scopes.scopeFor(names);
	}

	public IScope scope_ConnectionRef_ref(Instance i, EReference ref) {
		List<Connection> connections = new ArrayList<Connection>();
		List<DesignElement> elements = ((Design) i.eContainer()).getElements();
		for (DesignElement element : elements) {
			if (element instanceof Connection && elements.indexOf(element) < elements.indexOf(i))
				connections.add((Connection) element);
		}
		List<ConnectionName> names = new ArrayList<ConnectionName>();
		for (Connection connection : connections) {
			for (ConnectionName name : connection.getNames())
				names.add(name);
		}
		return Scopes.scopeFor(names);
	}

	// public IScope scope_Instance_subDesign(Design design, EReference ref) {
	// List<Design> designs = new ArrayList<Design>();
	// IResourceDescription resourceDescription =
	// resourceDescriptions.getResourceDescription(design.eResource().getURI());
	// List<IContainer> visiblecontainers =
	// containermanager.getVisibleContainers(resourceDescription, resourceDescriptions);
	// for (IContainer container : visiblecontainers) {
	// for (IEObjectDescription eobjectDescription : container.getExportedObjects()) {
	// EObject eObjectOrProxy = eobjectDescription.getEObjectOrProxy();
	// if (eObjectOrProxy instanceof Design)
	// designs.add((Design) eObjectOrProxy);
	// }
	// }
	// List<Design> scopedDesigns = new ArrayList<Design>();
	// for (Design d : designs) {
	// if (d.eIsProxy())
	// d = (Design) EcoreUtil.resolve(d, design);
	// if (d.isSubdesign())
	// scopedDesigns.add(d);
	// }
	// return Scopes.scopeFor(scopedDesigns);
	// }

	public IScope scope_PinAssign_ref(Instance i, EReference ref) {
		List<EObject> pins = new ArrayList<EObject>();
		for (DeviceElement element : i.getDevice().getElements()) {
			if (element instanceof Pin)
				pins.add(element);
		}
		return Scopes.scopeFor(pins);
	}

	public IScope scope_PortAssign_ref(Instance i, EReference ref) {
		if (i.isSubInst()) {
			List<ConnectionName> candidates = new ArrayList<ConnectionName>();
			for (DesignElement element : i.getSubDesign().getElements()) {
				if (element instanceof Connection && ((Connection) element).isPort())
					candidates.addAll(((Connection) element).getNames());
			}
			return Scopes.scopeFor(candidates);
		} else
			return null;
	}

	public IScope scope_RefAttr_ref(Instance i, EReference ref) {
		List<EObject> attrs = new ArrayList<EObject>();
		for (DeviceElement element : i.getDevice().getElements())
			if (element instanceof Attr)
				attrs.add(element);
		return Scopes.scopeFor(attrs);
	}

	public IScope scope_RefTail_ref(EObject context, EReference ref) {
		EObject parent = context.eContainer();

		Referenceable i = null;
		if (parent instanceof SubAttr)
			i = ((SubAttr) parent).getRef();
		else if (parent instanceof RefTail)
			i = ((RefTail) parent).getRef();
		if (i instanceof Instance && ((Instance) i).isSubInst())
			return Scopes.scopeFor(((Instance) i).getSubDesign().eContents());
		if (i instanceof Instance && ((Instance) i).isInst()) {
			List<Referenceable> candidates = new ArrayList<Referenceable>();
			for (EObject element : ((Instance) i).getElements()) {
				if (element instanceof RefAttr)
					candidates.add((Referenceable) element);
				else if (element instanceof NewAttr)
					candidates.add((Referenceable) element);
			}
			for (DeviceElement element : ((Instance) i).getDevice().getElements())
				if (element instanceof Attr)
					candidates.add((Referenceable) element);
			return Scopes.scopeFor(candidates);
		}

		// fall-through due to scoping problem
		return null;
	}

	public IScope scope_SubAttr_ref(Instance i, EReference ref) {
		if (i.isSubInst())
			return Scopes.scopeFor(i.getSubDesign().eContents());
		else
			return null;
	}
}
