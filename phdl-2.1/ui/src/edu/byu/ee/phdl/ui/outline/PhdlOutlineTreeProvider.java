/*
 * generated by Xtext
 */
package edu.byu.ee.phdl.ui.outline;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.jface.viewers.StyledString.Styler;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.ui.PluginImageHelper;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.ui.editor.utils.TextStyle;
import org.eclipse.xtext.ui.label.StylerFactory;

import com.google.inject.Inject;

import edu.byu.ee.phdl.phdl.Connection;
import edu.byu.ee.phdl.phdl.ConnectionName;
import edu.byu.ee.phdl.phdl.Design;
import edu.byu.ee.phdl.phdl.DesignElement;
import edu.byu.ee.phdl.phdl.Device;
import edu.byu.ee.phdl.phdl.Import;
import edu.byu.ee.phdl.phdl.Instance;
import edu.byu.ee.phdl.phdl.Package;
import edu.byu.ee.phdl.phdl.PhdlModel;
import edu.byu.ee.phdl.phdl.PhdlPackage;
import edu.byu.ee.phdl.phdl.Pin;
import edu.byu.ee.phdl.phdl.RefAttr;
import edu.byu.ee.phdl.utils.PhdlUtils;

/**
 * customization of the default outline structure
 * 
 */
public class PhdlOutlineTreeProvider extends DefaultOutlineTreeProvider {

	@Inject
	private StylerFactory stylerFactory;

	@Inject
	private PluginImageHelper imageHelper;

	private final TextStyle boldStyle = new TextStyle();
	private final FontData boldFont = new FontData();
	private final int textHeight = 8;

	public PhdlOutlineTreeProvider() {
		super();
		boldFont.setHeight(textHeight);
		boldFont.setStyle(SWT.BOLD);
		boldStyle.setFontData(boldFont);
	}

	protected void _createChildren(DocumentRootNode parent, PhdlModel p) {
		createPackageNodes(parent, p);
		createImportNodes(parent, p);
		createDeviceNodes(parent, p);
		createDesignNodes(parent, p);
	}

	protected void _createChildren(IOutlineNode parent, Connection c) {
		for (ConnectionName n : c.getNames()) {
			createNode(parent, n);
		}
	}

	protected void _createChildren(IOutlineNode parent, Design d) {
		VirtualOutlineNode portGroup = null;
		VirtualOutlineNode netGroup = null;
		List<Connection> ports = new ArrayList<Connection>();
		List<Connection> nets = new ArrayList<Connection>();
		for (DesignElement element : d.getElements()) {
			if (element instanceof Connection) {
				if (((Connection) element).isPort())
					ports.add((Connection) element);
				else if (((Connection) element).isNet())
					nets.add((Connection) element);
			}
		}
		if (!ports.isEmpty()) {
			Image image = imageHelper.getImage("Ports.gif");
			portGroup = new VirtualOutlineNode(parent, image, "Ports", false);
		}
		if (!nets.isEmpty()) {
			Image image = imageHelper.getImage("Nets.gif");
			netGroup = new VirtualOutlineNode(parent, image, "Nets", false);
		}
		for (Connection port : ports)
			for (ConnectionName name : port.getNames())
				createEObjectNode(portGroup, name);
		for (Connection net : nets)
			for (ConnectionName name : net.getNames())
				createEObjectNode(netGroup, name);
		// for (Connection c : design.gets()) {
		// if (c.isPort())
		// createNode(parentNode, c);
		// }
		// for (Connection c : design.gets()) {
		// if (c.isNet())
		// createNode(parentNode, c);
		// }

		for (DesignElement element : d.getElements())
			if (element instanceof Instance)
				createNode(parent, element);

		// for (SubDesInst i : design.getSubInsts())
		// createNode(parentNode, i);
	}

	protected void _createChildren(IOutlineNode parent, Instance i) {
		Set<String> names = new HashSet<String>();
		if (!i.getArray().isArray()) {
			for (EObject element : i.getElements()) {
				if (element instanceof RefAttr) {
					RefAttr a = (RefAttr) element;
					createNode(parent, a);
					names.add(a.getRef().getName());
				}
			}
		} else {
			for (Integer index : PhdlUtils.getIndices(i.getArray().getMsb(), i.getArray().getLsb())) {

				// create the containing node to hold all arrayed instances
				StyledString string = new StyledString(i.getName());
				string.append(" (" + index + ")", StyledString.COUNTER_STYLER);
				if (i.getDevice() != null)
					string.append(" : " + i.getDevice().getName(), StyledString.QUALIFIER_STYLER);
				Image image;
				if (i.isInst())
					image = imageHelper.getImage("Device.gif");
				else
					image = imageHelper.getImage("SubDesign.gif");
				VirtualOutlineNode instNode = new VirtualOutlineNode(parent, image, string, false);
				instNode.setTextRegion(parent.getSignificantTextRegion());
				for (EObject element : i.getElements()) {
					// add the referenced attributes
					if (element instanceof RefAttr) {
						RefAttr a = (RefAttr) element;
						if (a.getQualifier() != null) {
							if (a.getQualifier().getIndices().isArray()) {
								int msb = a.getQualifier().getIndices().getMsb();
								int lsb = a.getQualifier().getIndices().getLsb();
								for (Integer j : PhdlUtils.getIndices(msb, lsb))
									if (j == index) {
										createEObjectNode(instNode, a);
										names.add(a.getRef().getName() + "(" + j + ")");
									}
							} else {
								for (Integer j : a.getQualifier().getIndices().getIndices())
									if (j == index) {
										createEObjectNode(instNode, a);
										names.add(a.getRef().getName() + "(" + j + ")");
									}
							}
						} else {
							createEObjectNode(instNode, a);
							names.add(a.getRef().getName() + "(" + index + ")");
						}
					}
				}

				// add the inherited attributes

			}
		}
		// System.out.println(names);
	}

	protected void _createChildren(IOutlineNode parent, Pin p) {
		if (!p.getVector().isVector())
			return;
		List<Integer> indices = PhdlUtils.getIndices(p.getVector().getMsb(), p.getVector().getLsb());
		if (indices.size() != p.getPinNames().size())
			return;
		int index = 0;
		for (Integer i : indices) {
			StyledString string = new StyledString();
			string.append("[" + i + "]", StyledString.COUNTER_STYLER);
			string.append(" <-> ");
			string.append("{" + p.getPinNames().get(index) + "}", StyledString.COUNTER_STYLER);
			string.append(" : " + p.getType().getName(), StyledString.QUALIFIER_STYLER);
			Image image = null;
			switch (p.getType()) {
			case PIN:
				image = imageHelper.getImage("Pin_PIN.gif");
			case INPUT:
				image = imageHelper.getImage("Pin_INPUT.gif");
			case OUTPUT:
				image = imageHelper.getImage("Pin_OUTPUT.gif");
			case IN_OUT:
				image = imageHelper.getImage("Pin_IO.gif");
			case SUPPLY:
				image = imageHelper.getImage("Pin_SUPPLY.gif");
			case POWER:
				image = imageHelper.getImage("Pin_POWER.gif");
			case TRISTATE:
				image = imageHelper.getImage("Pin_HI_Z.gif");
			case PASSIVE:
				image = imageHelper.getImage("Pin_PASSIVE.gif");
			case NO_CONNECT:
				image = imageHelper.getImage("Pin_NO_CONNECT.gif");
			case OPEN_COLLECTOR:
				image = imageHelper.getImage("Pin_OPEN_COLLECTOR.gif");
			}
			EStructuralFeature f = PhdlPackage.Literals.PIN__PIN_NAMES;
			createEStructuralFeatureNode(parent, p, f, image, string, true);
			index++;
		}
	}

	protected boolean _isLeaf(ConnectionName n) {
		return true;
	}

	protected boolean _isLeaf(Instance i) {
		if (i.getElements().isEmpty())
			return true;
		else
			return false;
	}

	protected boolean _isLeaf(Package p) {
		return true;
	}

	protected boolean _isLeaf(Pin p) {
		if (p.getVector().isVector())
			return false;
		else
			return true;
	}

	public Object _text(Connection c) {
		String names = "";
		for (ConnectionName n : c.getNames())
			names += n.getName() + ", ";
		names = names.substring(0, names.length() - 2);
		StyledString string = new StyledString(names);
		String array = c.getVector().isVector() ? (" [" + c.getVector().getMsb() + ":" + c.getVector().getLsb() + "]") : "";
		string.append(array, StyledString.COUNTER_STYLER);
		String qualifier = " : " + ((Design) c.eContainer()).getName();
		return string.append(qualifier, StyledString.QUALIFIER_STYLER);
	}

	private void createDesignNodes(IOutlineNode parent, PhdlModel phdlModel) {
		StyledString designName = new StyledString("Designs", getBoldStyler());
		StyledString subDesName = new StyledString("SubDesigns", getBoldStyler());
		VirtualOutlineNode designGroup = null;
		VirtualOutlineNode subDesignGroup = null;
		List<Design> designs = new ArrayList<Design>();
		List<Design> subDesigns = new ArrayList<Design>();
		for (Design d : phdlModel.getDesigns()) {
			if (d.isDesign())
				designs.add(d);
			if (d.isSubdesign())
				subDesigns.add(d);
		}
		for (Package p : phdlModel.getPackages()) {
			for (Design d : p.getDesigns()) {
				if (d.isDesign())
					designs.add(d);
				if (d.isSubdesign())
					subDesigns.add(d);
			}
		}
		if (!designs.isEmpty()) {
			Image image = imageHelper.getImage("Design.gif");
			designGroup = new VirtualOutlineNode(parent, image, designName, false);
		}
		for (Design design : designs)
			createEObjectNode(designGroup, design);

		if (!subDesigns.isEmpty()) {
			Image image = imageHelper.getImage("SubDesign.gif");
			subDesignGroup = new VirtualOutlineNode(parent, image, subDesName, false);
		}
		for (Design s : subDesigns) {
			createEObjectNode(subDesignGroup, s);
		}

	}

	private void createDeviceNodes(IOutlineNode parentNode, PhdlModel phdlModel) {
		StyledString devicesName = new StyledString("Devices", getBoldStyler());
		VirtualOutlineNode deviceGroup = null;
		List<Device> devices = new ArrayList<Device>();
		for (Device d : phdlModel.getDevices())
			devices.add(d);
		for (Package p : phdlModel.getPackages())
			for (Device d : p.getDevices())
				devices.add(d);
		if (!devices.isEmpty()) {
			Image image = imageHelper.getImage("Device.gif");
			deviceGroup = new VirtualOutlineNode(parentNode, image, devicesName, false);
		}
		for (Device device : devices)
			createEObjectNode(deviceGroup, device);
	}

	private void createImportNodes(IOutlineNode parentNode, PhdlModel phdlModel) {
		StyledString importsName = new StyledString("Imports", getBoldStyler());
		VirtualOutlineNode importGroup = null;
		List<Import> imports = new ArrayList<Import>();
		for (Import i : phdlModel.getImports())
			imports.add(i);
		for (Package p : phdlModel.getPackages())
			for (Import i : p.getImports())
				imports.add(i);
		if (!imports.isEmpty()) {
			Image image = imageHelper.getImage("Import.gif");
			importGroup = new VirtualOutlineNode(parentNode, image, importsName, false);
		}
		for (Import i : imports)
			createEObjectNode(importGroup, i);
	}

	private void createPackageNodes(IOutlineNode parentNode, PhdlModel phdlModel) {
		StyledString packages = new StyledString("Packages", getBoldStyler());
		VirtualOutlineNode packageGroup = null;
		if (!phdlModel.getPackages().isEmpty()) {
			Image image = imageHelper.getImage("Package.gif");
			packageGroup = new VirtualOutlineNode(parentNode, image, packages, false);
		}
		for (Package p : phdlModel.getPackages())
			createEObjectNode(packageGroup, p);
	}

	private Styler getBoldStyler() {
		return stylerFactory.createXtextStyleAdapterStyler(boldStyle);
	}

}
