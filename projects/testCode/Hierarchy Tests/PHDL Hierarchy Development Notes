PHDL Hierarchy Development Notes
Author:	Richard Black

November 29, 2011
--------------------------
	Potential Problem	1.1
		Net Attributes now have braces instead of 'is' and 'end.'
		However, this is a separate case from design declarations,
		device declarations, and device instances.  A net without
		attributes naturally ends with a semicolon, but if it does
		have attributes, it ends with a right curly brace, not a
		semicolon.
	
		Example
			net testNet;
			net testNet { attr color="blue"; }	//No semicolon
			net testNet {} //Valid syntax and no semicolon
		
		This never arises in the aforementioned cases because they
		do not have a possible state without braces.

		Example
			device testDevice {}	//Valid syntax
			device testDevice;		//Invalid syntax and pointless

	Proposed Solution	1.1
		Make clear to the users that this is the case.  I don't see
		any alternative that is clean and elegant.

December 1, 2011
--------------------------
	Potential Problem	2.1
		There will be a slight challenge when walking the AST when it
		it comes to sub design attribute assignments.  If a user decides
		to use nested designs, such as the following:

			this(1).mysub1.mysub2.inst1.attr1 = "value1";

		, where
			this(1)		refers to the top sub design instance,
			mysub1		refers to a sub design instance within this(1),
			mysub2		refers to a sub design instance within mysub1,
			inst1		refers to an instance withing mysub1,
			attr1		refers to an attribute within inst1, and
			value1		refers to the value being assigned,

		then the parser will interpret this as follows:

			subAssignment
				subAttr Assignment
					arrayQualifier
						'this'
						arrayList
							'('
							'1'
							')'
						'/'
					instSpecifier			<---
						'mysub1'				|
						'/'						|
					instSpecifier			<-----All use same rule	
						'mysub2'				|
						'.'						|
					instSpecifier			<---
						'inst1'
						'.'
					'attr'
					'='
					'value1'
					';'

		The parser will classify mysub1, mysub2, and inst1 as
		instSpecifiers.  This is because there is nothing to
		distinguish a device instance from a sub design instance.
		They both start with an IDENT, followed by an arrayList
		and a PERIOD.

		An easy answer would be to always assume that the last
		instSpecifier is a device instance, but given the situation
		that the user is updating the refPrefix for a certain sub
		design, this assumption fails.

		For example, if a user types the following assignment,

			this(3).mysub3.mysub2.mysub1.refPrefix = "L1";

		, where
			this(3)		refers to the top sub design instance,
			mysub3		refers to a sub design instance within this(3),
			mysub2		refers to a sub design instance within mysub3,
			mysub1		refers to a sub design instance within mysub2,
			refPrefix	refers to the ref des prefix for mysub1, and
			L1			refers to the new value of refPrefix for mysub1,

		then the parser will interpret this as follows:

			subAssignment
				subAttrAssignment
					arrayQualifier
						'this'
						arrayList
							'('
							'3'
							')'
						'.'
					instSpecifier
						'mysub3'
						'.'
					instSpecifier
						'mysub2'
						'.'
					instSpecifier		<-- The last instSpecifier
						'mysub1'			isn't a device instance
						'.'
					'refPrefix'
					'='
					'L1'
					';'

		In this case the last instSpecifier isn't a device instance,
		and our prior assumption doesn't hold. In other words, there
		needs to be a way to distinguish sub design instance and
		device instance accessing syntax.

	Proposed Solution	2.1
		We can use some other accessor notation such as '->' instead
		of a '.' when referring to the inner workings of a sub design.

		For example, the code from before:

			this(1).mysub1.mysub2.inst1.attr1 = "value1";

		would become the following:

			this(1)->mysub1->mysub2.inst1.attr1 = "value1";

		This would give us a means to distinguish between device instances
		and sub design instances when interpreting the AST in PHDLWalker.
