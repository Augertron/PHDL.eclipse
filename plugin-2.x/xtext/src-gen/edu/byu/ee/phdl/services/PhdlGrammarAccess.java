/*
* generated by Xtext
*/

package edu.byu.ee.phdl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class PhdlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PhdlModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PhdlModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPackagesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPackagesPackageParserRuleCall_1_0_0 = (RuleCall)cPackagesAssignment_1_0.eContents().get(0);
		private final Assignment cDevicesAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDevicesDeviceParserRuleCall_1_1_0 = (RuleCall)cDevicesAssignment_1_1.eContents().get(0);
		private final Assignment cDesignsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cDesignsDesignParserRuleCall_1_2_0 = (RuleCall)cDesignsAssignment_1_2.eContents().get(0);
		
		//PhdlModel:
		//	imports+=Import* (packages+=Package | devices+=Device | designs+=Design)*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* (packages+=Package | devices+=Device | designs+=Design)*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//(packages+=Package | devices+=Device | designs+=Design)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//packages+=Package
		public Assignment getPackagesAssignment_1_0() { return cPackagesAssignment_1_0; }

		//Package
		public RuleCall getPackagesPackageParserRuleCall_1_0_0() { return cPackagesPackageParserRuleCall_1_0_0; }

		//devices+=Device
		public Assignment getDevicesAssignment_1_1() { return cDevicesAssignment_1_1; }

		//Device
		public RuleCall getDevicesDeviceParserRuleCall_1_1_0() { return cDevicesDeviceParserRuleCall_1_1_0; }

		//designs+=Design
		public Assignment getDesignsAssignment_1_2() { return cDesignsAssignment_1_2; }

		//Design
		public RuleCall getDesignsDesignParserRuleCall_1_2_0() { return cDesignsDesignParserRuleCall_1_2_0; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDevicesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDevicesDeviceParserRuleCall_4_0_0 = (RuleCall)cDevicesAssignment_4_0.eContents().get(0);
		private final Assignment cDesignsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cDesignsDesignParserRuleCall_4_1_0 = (RuleCall)cDesignsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Package:
		//	"package" name=ID "{" imports+=Import* (devices+=Device | designs+=Design)* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=ID "{" imports+=Import* (devices+=Device | designs+=Design)* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }

		//(devices+=Device | designs+=Design)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//devices+=Device
		public Assignment getDevicesAssignment_4_0() { return cDevicesAssignment_4_0; }

		//Device
		public RuleCall getDevicesDeviceParserRuleCall_4_0_0() { return cDevicesDeviceParserRuleCall_4_0_0; }

		//designs+=Design
		public Assignment getDesignsAssignment_4_1() { return cDesignsAssignment_4_1; }

		//Design
		public RuleCall getDesignsDesignParserRuleCall_4_1_0() { return cDesignsDesignParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard ";";
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhdlIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsDeviceElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Device:
		//	"device" name=PhdlID "{" elements+=DeviceElement* "}";
		public ParserRule getRule() { return rule; }

		//"device" name=PhdlID "{" elements+=DeviceElement* "}"
		public Group getGroup() { return cGroup; }

		//"device"
		public Keyword getDeviceKeyword_0() { return cDeviceKeyword_0; }

		//name=PhdlID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//PhdlID
		public RuleCall getNamePhdlIDParserRuleCall_1_0() { return cNamePhdlIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=DeviceElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//DeviceElement
		public RuleCall getElementsDeviceElementParserRuleCall_3_0() { return cElementsDeviceElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DeviceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPinParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInfoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DeviceElement:
		//	Attr | Pin | Info;
		public ParserRule getRule() { return rule; }

		//Attr | Pin | Info
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attr
		public RuleCall getAttrParserRuleCall_0() { return cAttrParserRuleCall_0; }

		//Pin
		public RuleCall getPinParserRuleCall_1() { return cPinParserRuleCall_1; }

		//Info
		public RuleCall getInfoParserRuleCall_2() { return cInfoParserRuleCall_2; }
	}

	public class AttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Attr:
		//	"attr" name=ID "=" value=STRING ";";
		public ParserRule getRule() { return rule; }

		//"attr" name=ID "=" value=STRING ";"
		public Group getGroup() { return cGroup; }

		//"attr"
		public Keyword getAttrKeyword_0() { return cAttrKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class PinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePinTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVectorVectorParserRuleCall_1_0 = (RuleCall)cVectorAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamePhdlIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cPinNamesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cPinNamesPhdlIDParserRuleCall_5_0_0 = (RuleCall)cPinNamesAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cPinNamesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cPinNamesPhdlIDParserRuleCall_5_1_1_0 = (RuleCall)cPinNamesAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Pin:
		//	type=PinType vector=Vector name=PhdlID "=" "{" (pinNames+=PhdlID ("," pinNames+=PhdlID)*)? "}" ";";
		public ParserRule getRule() { return rule; }

		//type=PinType vector=Vector name=PhdlID "=" "{" (pinNames+=PhdlID ("," pinNames+=PhdlID)*)? "}" ";"
		public Group getGroup() { return cGroup; }

		//type=PinType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//PinType
		public RuleCall getTypePinTypeEnumRuleCall_0_0() { return cTypePinTypeEnumRuleCall_0_0; }

		//vector=Vector
		public Assignment getVectorAssignment_1() { return cVectorAssignment_1; }

		//Vector
		public RuleCall getVectorVectorParserRuleCall_1_0() { return cVectorVectorParserRuleCall_1_0; }

		//name=PhdlID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//PhdlID
		public RuleCall getNamePhdlIDParserRuleCall_2_0() { return cNamePhdlIDParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(pinNames+=PhdlID ("," pinNames+=PhdlID)*)?
		public Group getGroup_5() { return cGroup_5; }

		//pinNames+=PhdlID
		public Assignment getPinNamesAssignment_5_0() { return cPinNamesAssignment_5_0; }

		//PhdlID
		public RuleCall getPinNamesPhdlIDParserRuleCall_5_0_0() { return cPinNamesPhdlIDParserRuleCall_5_0_0; }

		//("," pinNames+=PhdlID)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//pinNames+=PhdlID
		public Assignment getPinNamesAssignment_5_1_1() { return cPinNamesAssignment_5_1_1; }

		//PhdlID
		public RuleCall getPinNamesPhdlIDParserRuleCall_5_1_1_0() { return cPinNamesPhdlIDParserRuleCall_5_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class InfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Info");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInfoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInfoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInfoSTRINGTerminalRuleCall_2_0 = (RuleCall)cInfoAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Info:
		//	"info" "{" info=STRING "}";
		public ParserRule getRule() { return rule; }

		//"info" "{" info=STRING "}"
		public Group getGroup() { return cGroup; }

		//"info"
		public Keyword getInfoKeyword_0() { return cInfoKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//info=STRING
		public Assignment getInfoAssignment_2() { return cInfoAssignment_2; }

		//STRING
		public RuleCall getInfoSTRINGTerminalRuleCall_2_0() { return cInfoSTRINGTerminalRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class DesignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Design");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cDesignAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cDesignDesignKeyword_0_0_0 = (Keyword)cDesignAssignment_0_0.eContents().get(0);
		private final Assignment cSubdesignAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cSubdesignSubdesignKeyword_0_1_0 = (Keyword)cSubdesignAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsDesignElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Design:
		//	(design?="design" | subdesign?="subdesign") name=ID "{" elements+=DesignElement* "}";
		public ParserRule getRule() { return rule; }

		//(design?="design" | subdesign?="subdesign") name=ID "{" elements+=DesignElement* "}"
		public Group getGroup() { return cGroup; }

		//design?="design" | subdesign?="subdesign"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//design?="design"
		public Assignment getDesignAssignment_0_0() { return cDesignAssignment_0_0; }

		//"design"
		public Keyword getDesignDesignKeyword_0_0_0() { return cDesignDesignKeyword_0_0_0; }

		//subdesign?="subdesign"
		public Assignment getSubdesignAssignment_0_1() { return cSubdesignAssignment_0_1; }

		//"subdesign"
		public Keyword getSubdesignSubdesignKeyword_0_1_0() { return cSubdesignSubdesignKeyword_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=DesignElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//DesignElement
		public RuleCall getElementsDesignElementParserRuleCall_3_0() { return cElementsDesignElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DesignElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DesignElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConnectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConnectionAssignParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInfoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DesignElement:
		//	Connection | Instance | ConnectionAssign | Info;
		public ParserRule getRule() { return rule; }

		//Connection | Instance | ConnectionAssign | Info
		public Alternatives getAlternatives() { return cAlternatives; }

		//Connection
		public RuleCall getConnectionParserRuleCall_0() { return cConnectionParserRuleCall_0; }

		//Instance
		public RuleCall getInstanceParserRuleCall_1() { return cInstanceParserRuleCall_1; }

		//ConnectionAssign
		public RuleCall getConnectionAssignParserRuleCall_2() { return cConnectionAssignParserRuleCall_2; }

		//Info
		public RuleCall getInfoParserRuleCall_3() { return cInfoParserRuleCall_3; }
	}

	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Connection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNetAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNetNetKeyword_0_0_0 = (Keyword)cNetAssignment_0_0.eContents().get(0);
		private final Assignment cVectorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVectorVectorParserRuleCall_0_1_0 = (RuleCall)cVectorAssignment_0_1.eContents().get(0);
		private final Assignment cNamesAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNamesConnectionNameParserRuleCall_0_2_0 = (RuleCall)cNamesAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cNamesAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cNamesConnectionNameParserRuleCall_0_3_1_0 = (RuleCall)cNamesAssignment_0_3_1.eContents().get(0);
		private final Alternatives cAlternatives_0_4 = (Alternatives)cGroup_0.eContents().get(4);
		private final Group cGroup_0_4_0 = (Group)cAlternatives_0_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_4_0_0 = (Keyword)cGroup_0_4_0.eContents().get(0);
		private final Assignment cElementsAssignment_0_4_0_1 = (Assignment)cGroup_0_4_0.eContents().get(1);
		private final RuleCall cElementsNetElementParserRuleCall_0_4_0_1_0 = (RuleCall)cElementsAssignment_0_4_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4_0_2 = (Keyword)cGroup_0_4_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_0_4_1 = (Keyword)cAlternatives_0_4.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPortAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cPortPortKeyword_1_0_0 = (Keyword)cPortAssignment_1_0.eContents().get(0);
		private final Assignment cVectorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVectorVectorParserRuleCall_1_1_0 = (RuleCall)cVectorAssignment_1_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNamesConnectionNameParserRuleCall_1_2_0 = (RuleCall)cNamesAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cNamesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cNamesConnectionNameParserRuleCall_1_3_1_0 = (RuleCall)cNamesAssignment_1_3_1.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Group cGroup_1_4_0 = (Group)cAlternatives_1_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_4_0_0 = (Keyword)cGroup_1_4_0.eContents().get(0);
		private final Assignment cElementsAssignment_1_4_0_1 = (Assignment)cGroup_1_4_0.eContents().get(1);
		private final RuleCall cElementsPortElementParserRuleCall_1_4_0_1_0 = (RuleCall)cElementsAssignment_1_4_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4_0_2 = (Keyword)cGroup_1_4_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		
		//Connection:
		//	net?="net" vector=Vector names+=ConnectionName ("," names+=ConnectionName)* ("{" elements+=NetElement* "}" | ";") |
		//	port?="port" vector=Vector names+=ConnectionName ("," names+=ConnectionName)* ("{" elements+=PortElement* "}" | ";");
		public ParserRule getRule() { return rule; }

		//net?="net" vector=Vector names+=ConnectionName ("," names+=ConnectionName)* ("{" elements+=NetElement* "}" | ";") |
		//port?="port" vector=Vector names+=ConnectionName ("," names+=ConnectionName)* ("{" elements+=PortElement* "}" | ";")
		public Alternatives getAlternatives() { return cAlternatives; }

		//net?="net" vector=Vector names+=ConnectionName ("," names+=ConnectionName)* ("{" elements+=NetElement* "}" | ";")
		public Group getGroup_0() { return cGroup_0; }

		//net?="net"
		public Assignment getNetAssignment_0_0() { return cNetAssignment_0_0; }

		//"net"
		public Keyword getNetNetKeyword_0_0_0() { return cNetNetKeyword_0_0_0; }

		//vector=Vector
		public Assignment getVectorAssignment_0_1() { return cVectorAssignment_0_1; }

		//Vector
		public RuleCall getVectorVectorParserRuleCall_0_1_0() { return cVectorVectorParserRuleCall_0_1_0; }

		//names+=ConnectionName
		public Assignment getNamesAssignment_0_2() { return cNamesAssignment_0_2; }

		//ConnectionName
		public RuleCall getNamesConnectionNameParserRuleCall_0_2_0() { return cNamesConnectionNameParserRuleCall_0_2_0; }

		//("," names+=ConnectionName)*
		public Group getGroup_0_3() { return cGroup_0_3; }

		//","
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }

		//names+=ConnectionName
		public Assignment getNamesAssignment_0_3_1() { return cNamesAssignment_0_3_1; }

		//ConnectionName
		public RuleCall getNamesConnectionNameParserRuleCall_0_3_1_0() { return cNamesConnectionNameParserRuleCall_0_3_1_0; }

		//"{" elements+=NetElement* "}" | ";"
		public Alternatives getAlternatives_0_4() { return cAlternatives_0_4; }

		//"{" elements+=NetElement* "}"
		public Group getGroup_0_4_0() { return cGroup_0_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_4_0_0() { return cLeftCurlyBracketKeyword_0_4_0_0; }

		//elements+=NetElement*
		public Assignment getElementsAssignment_0_4_0_1() { return cElementsAssignment_0_4_0_1; }

		//NetElement
		public RuleCall getElementsNetElementParserRuleCall_0_4_0_1_0() { return cElementsNetElementParserRuleCall_0_4_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_4_0_2() { return cRightCurlyBracketKeyword_0_4_0_2; }

		//";"
		public Keyword getSemicolonKeyword_0_4_1() { return cSemicolonKeyword_0_4_1; }

		//port?="port" vector=Vector names+=ConnectionName ("," names+=ConnectionName)* ("{" elements+=PortElement* "}" | ";")
		public Group getGroup_1() { return cGroup_1; }

		//port?="port"
		public Assignment getPortAssignment_1_0() { return cPortAssignment_1_0; }

		//"port"
		public Keyword getPortPortKeyword_1_0_0() { return cPortPortKeyword_1_0_0; }

		//vector=Vector
		public Assignment getVectorAssignment_1_1() { return cVectorAssignment_1_1; }

		//Vector
		public RuleCall getVectorVectorParserRuleCall_1_1_0() { return cVectorVectorParserRuleCall_1_1_0; }

		//names+=ConnectionName
		public Assignment getNamesAssignment_1_2() { return cNamesAssignment_1_2; }

		//ConnectionName
		public RuleCall getNamesConnectionNameParserRuleCall_1_2_0() { return cNamesConnectionNameParserRuleCall_1_2_0; }

		//("," names+=ConnectionName)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//names+=ConnectionName
		public Assignment getNamesAssignment_1_3_1() { return cNamesAssignment_1_3_1; }

		//ConnectionName
		public RuleCall getNamesConnectionNameParserRuleCall_1_3_1_0() { return cNamesConnectionNameParserRuleCall_1_3_1_0; }

		//"{" elements+=PortElement* "}" | ";"
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }

		//"{" elements+=PortElement* "}"
		public Group getGroup_1_4_0() { return cGroup_1_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_4_0_0() { return cLeftCurlyBracketKeyword_1_4_0_0; }

		//elements+=PortElement*
		public Assignment getElementsAssignment_1_4_0_1() { return cElementsAssignment_1_4_0_1; }

		//PortElement
		public RuleCall getElementsPortElementParserRuleCall_1_4_0_1_0() { return cElementsPortElementParserRuleCall_1_4_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_4_0_2() { return cRightCurlyBracketKeyword_1_4_0_2; }

		//";"
		public Keyword getSemicolonKeyword_1_4_1() { return cSemicolonKeyword_1_4_1; }
	}

	public class NetElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NetElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInfoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NetElement:
		//	Attr | Info;
		public ParserRule getRule() { return rule; }

		//Attr | Info
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attr
		public RuleCall getAttrParserRuleCall_0() { return cAttrParserRuleCall_0; }

		//Info
		public RuleCall getInfoParserRuleCall_1() { return cInfoParserRuleCall_1; }
	}

	public class PortElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortElement");
		private final RuleCall cInfoParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PortElement:
		//	Info;
		public ParserRule getRule() { return rule; }

		//Info
		public RuleCall getInfoParserRuleCall() { return cInfoParserRuleCall; }
	}

	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instance");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cInstAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cInstInstKeyword_0_0_0 = (Keyword)cInstAssignment_0_0.eContents().get(0);
		private final Assignment cArrayAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_0_1_0 = (RuleCall)cArrayAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cOfKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cDeviceAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cDeviceDeviceCrossReference_0_4_0 = (CrossReference)cDeviceAssignment_0_4.eContents().get(0);
		private final RuleCall cDeviceDeviceQualifiedNameParserRuleCall_0_4_0_1 = (RuleCall)cDeviceDeviceCrossReference_0_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cElementsAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cElementsInstanceElementParserRuleCall_0_6_0 = (RuleCall)cElementsAssignment_0_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSubInstAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cSubInstSubinstKeyword_1_0_0 = (Keyword)cSubInstAssignment_1_0.eContents().get(0);
		private final Assignment cArrayAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArrayArrayParserRuleCall_1_1_0 = (RuleCall)cArrayAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cOfKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cSubDesignAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final CrossReference cSubDesignDesignCrossReference_1_4_0 = (CrossReference)cSubDesignAssignment_1_4.eContents().get(0);
		private final RuleCall cSubDesignDesignQualifiedNameParserRuleCall_1_4_0_1 = (RuleCall)cSubDesignDesignCrossReference_1_4_0.eContents().get(1);
		private final Assignment cPrefixAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cPrefixSTRINGTerminalRuleCall_1_5_0 = (RuleCall)cPrefixAssignment_1_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cElementsAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cElementsSubInstanceElementParserRuleCall_1_7_0 = (RuleCall)cElementsAssignment_1_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		
		//Instance:
		//	inst?="inst" array=Array name=ID "of" device=[Device|QualifiedName] "{" elements+=InstanceElement* "}" |
		//	subInst?="subinst" array=Array name=ID "of" subDesign=[Design|QualifiedName] prefix=STRING? "{"
		//	elements+=SubInstanceElement* "}";
		public ParserRule getRule() { return rule; }

		//inst?="inst" array=Array name=ID "of" device=[Device|QualifiedName] "{" elements+=InstanceElement* "}" |
		//subInst?="subinst" array=Array name=ID "of" subDesign=[Design|QualifiedName] prefix=STRING? "{"
		//elements+=SubInstanceElement* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//inst?="inst" array=Array name=ID "of" device=[Device|QualifiedName] "{" elements+=InstanceElement* "}"
		public Group getGroup_0() { return cGroup_0; }

		//inst?="inst"
		public Assignment getInstAssignment_0_0() { return cInstAssignment_0_0; }

		//"inst"
		public Keyword getInstInstKeyword_0_0_0() { return cInstInstKeyword_0_0_0; }

		//array=Array
		public Assignment getArrayAssignment_0_1() { return cArrayAssignment_0_1; }

		//Array
		public RuleCall getArrayArrayParserRuleCall_0_1_0() { return cArrayArrayParserRuleCall_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//"of"
		public Keyword getOfKeyword_0_3() { return cOfKeyword_0_3; }

		//device=[Device|QualifiedName]
		public Assignment getDeviceAssignment_0_4() { return cDeviceAssignment_0_4; }

		//[Device|QualifiedName]
		public CrossReference getDeviceDeviceCrossReference_0_4_0() { return cDeviceDeviceCrossReference_0_4_0; }

		//QualifiedName
		public RuleCall getDeviceDeviceQualifiedNameParserRuleCall_0_4_0_1() { return cDeviceDeviceQualifiedNameParserRuleCall_0_4_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_5() { return cLeftCurlyBracketKeyword_0_5; }

		//elements+=InstanceElement*
		public Assignment getElementsAssignment_0_6() { return cElementsAssignment_0_6; }

		//InstanceElement
		public RuleCall getElementsInstanceElementParserRuleCall_0_6_0() { return cElementsInstanceElementParserRuleCall_0_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_7() { return cRightCurlyBracketKeyword_0_7; }

		//subInst?="subinst" array=Array name=ID "of" subDesign=[Design|QualifiedName] prefix=STRING? "{"
		//elements+=SubInstanceElement* "}"
		public Group getGroup_1() { return cGroup_1; }

		//subInst?="subinst"
		public Assignment getSubInstAssignment_1_0() { return cSubInstAssignment_1_0; }

		//"subinst"
		public Keyword getSubInstSubinstKeyword_1_0_0() { return cSubInstSubinstKeyword_1_0_0; }

		//array=Array
		public Assignment getArrayAssignment_1_1() { return cArrayAssignment_1_1; }

		//Array
		public RuleCall getArrayArrayParserRuleCall_1_1_0() { return cArrayArrayParserRuleCall_1_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }

		//"of"
		public Keyword getOfKeyword_1_3() { return cOfKeyword_1_3; }

		//subDesign=[Design|QualifiedName]
		public Assignment getSubDesignAssignment_1_4() { return cSubDesignAssignment_1_4; }

		//[Design|QualifiedName]
		public CrossReference getSubDesignDesignCrossReference_1_4_0() { return cSubDesignDesignCrossReference_1_4_0; }

		//QualifiedName
		public RuleCall getSubDesignDesignQualifiedNameParserRuleCall_1_4_0_1() { return cSubDesignDesignQualifiedNameParserRuleCall_1_4_0_1; }

		//prefix=STRING?
		public Assignment getPrefixAssignment_1_5() { return cPrefixAssignment_1_5; }

		//STRING
		public RuleCall getPrefixSTRINGTerminalRuleCall_1_5_0() { return cPrefixSTRINGTerminalRuleCall_1_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_6() { return cLeftCurlyBracketKeyword_1_6; }

		//elements+=SubInstanceElement*
		public Assignment getElementsAssignment_1_7() { return cElementsAssignment_1_7; }

		//SubInstanceElement
		public RuleCall getElementsSubInstanceElementParserRuleCall_1_7_0() { return cElementsSubInstanceElementParserRuleCall_1_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_8() { return cRightCurlyBracketKeyword_1_8; }
	}

	public class InstanceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNewAttrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefAttrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPinAssignParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInfoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//InstanceElement:
		//	NewAttr | RefAttr | PinAssign | Info;
		public ParserRule getRule() { return rule; }

		//NewAttr | RefAttr | PinAssign | Info
		public Alternatives getAlternatives() { return cAlternatives; }

		//NewAttr
		public RuleCall getNewAttrParserRuleCall_0() { return cNewAttrParserRuleCall_0; }

		//RefAttr
		public RuleCall getRefAttrParserRuleCall_1() { return cRefAttrParserRuleCall_1; }

		//PinAssign
		public RuleCall getPinAssignParserRuleCall_2() { return cPinAssignParserRuleCall_2; }

		//Info
		public RuleCall getInfoParserRuleCall_3() { return cInfoParserRuleCall_3; }
	}

	public class SubInstanceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubInstanceElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubAttrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPortAssignParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInfoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SubInstanceElement:
		//	Attr | SubAttr | PortAssign | Info;
		public ParserRule getRule() { return rule; }

		//Attr | SubAttr | PortAssign | Info
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attr
		public RuleCall getAttrParserRuleCall_0() { return cAttrParserRuleCall_0; }

		//SubAttr
		public RuleCall getSubAttrParserRuleCall_1() { return cSubAttrParserRuleCall_1; }

		//PortAssign
		public RuleCall getPortAssignParserRuleCall_2() { return cPortAssignParserRuleCall_2; }

		//Info
		public RuleCall getInfoParserRuleCall_3() { return cInfoParserRuleCall_3; }
	}

	public class RefAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RefAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualifierQualifierParserRuleCall_0_0 = (RuleCall)cQualifierAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefAttrCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefAttrIDTerminalRuleCall_1_0_1 = (RuleCall)cRefAttrCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RefAttr:
		//	qualifier=Qualifier? ref=[Attr] "=" value=STRING ";";
		public ParserRule getRule() { return rule; }

		//qualifier=Qualifier? ref=[Attr] "=" value=STRING ";"
		public Group getGroup() { return cGroup; }

		//qualifier=Qualifier?
		public Assignment getQualifierAssignment_0() { return cQualifierAssignment_0; }

		//Qualifier
		public RuleCall getQualifierQualifierParserRuleCall_0_0() { return cQualifierQualifierParserRuleCall_0_0; }

		//ref=[Attr]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[Attr]
		public CrossReference getRefAttrCrossReference_1_0() { return cRefAttrCrossReference_1_0; }

		//ID
		public RuleCall getRefAttrIDTerminalRuleCall_1_0_1() { return cRefAttrIDTerminalRuleCall_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NewAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewattrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifierQualifierParserRuleCall_1_0 = (RuleCall)cQualifierAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//NewAttr:
		//	"newattr" qualifier=Qualifier? name=ID "=" value=STRING ";";
		public ParserRule getRule() { return rule; }

		//"newattr" qualifier=Qualifier? name=ID "=" value=STRING ";"
		public Group getGroup() { return cGroup; }

		//"newattr"
		public Keyword getNewattrKeyword_0() { return cNewattrKeyword_0; }

		//qualifier=Qualifier?
		public Assignment getQualifierAssignment_1() { return cQualifierAssignment_1; }

		//Qualifier
		public RuleCall getQualifierQualifierParserRuleCall_1_0() { return cQualifierQualifierParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=STRING
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_0() { return cValueSTRINGTerminalRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class PinAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PinAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cCombinedAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Keyword cCombinedCombineKeyword_0_0_0_0 = (Keyword)cCombinedAssignment_0_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cQualifierAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cQualifierQualifierParserRuleCall_0_0_2_0 = (RuleCall)cQualifierAssignment_0_0_2.eContents().get(0);
		private final Assignment cRefAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final CrossReference cRefPinCrossReference_0_0_3_0 = (CrossReference)cRefAssignment_0_0_3.eContents().get(0);
		private final RuleCall cRefPinPhdlIDParserRuleCall_0_0_3_0_1 = (RuleCall)cRefPinCrossReference_0_0_3_0.eContents().get(1);
		private final Assignment cSlicesAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cSlicesSlicesParserRuleCall_0_0_4_0 = (RuleCall)cSlicesAssignment_0_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_5 = (Keyword)cGroup_0_0.eContents().get(5);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cQualifierAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cQualifierQualifierParserRuleCall_0_1_0_0 = (RuleCall)cQualifierAssignment_0_1_0.eContents().get(0);
		private final Assignment cRefAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cRefPinCrossReference_0_1_1_0 = (CrossReference)cRefAssignment_0_1_1.eContents().get(0);
		private final RuleCall cRefPinPhdlIDParserRuleCall_0_1_1_0_1 = (RuleCall)cRefPinCrossReference_0_1_1_0.eContents().get(1);
		private final Assignment cSlicesAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cSlicesSlicesParserRuleCall_0_1_2_0 = (RuleCall)cSlicesAssignment_0_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConcatenationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConcatenationConcatenationParserRuleCall_2_0 = (RuleCall)cConcatenationAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PinAssign:
		//	(combined?="combine" "(" qualifier=Qualifier? ref=[Pin|PhdlID] slices=Slices? ")" | qualifier=Qualifier?
		//	ref=[Pin|PhdlID] slices=Slices?) "=" concatenation=Concatenation ";";
		public ParserRule getRule() { return rule; }

		//(combined?="combine" "(" qualifier=Qualifier? ref=[Pin|PhdlID] slices=Slices? ")" | qualifier=Qualifier?
		//ref=[Pin|PhdlID] slices=Slices?) "=" concatenation=Concatenation ";"
		public Group getGroup() { return cGroup; }

		//combined?="combine" "(" qualifier=Qualifier? ref=[Pin|PhdlID] slices=Slices? ")" | qualifier=Qualifier? ref=[Pin|PhdlID]
		//slices=Slices?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//combined?="combine" "(" qualifier=Qualifier? ref=[Pin|PhdlID] slices=Slices? ")"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//combined?="combine"
		public Assignment getCombinedAssignment_0_0_0() { return cCombinedAssignment_0_0_0; }

		//"combine"
		public Keyword getCombinedCombineKeyword_0_0_0_0() { return cCombinedCombineKeyword_0_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0_1() { return cLeftParenthesisKeyword_0_0_1; }

		//qualifier=Qualifier?
		public Assignment getQualifierAssignment_0_0_2() { return cQualifierAssignment_0_0_2; }

		//Qualifier
		public RuleCall getQualifierQualifierParserRuleCall_0_0_2_0() { return cQualifierQualifierParserRuleCall_0_0_2_0; }

		//ref=[Pin|PhdlID]
		public Assignment getRefAssignment_0_0_3() { return cRefAssignment_0_0_3; }

		//[Pin|PhdlID]
		public CrossReference getRefPinCrossReference_0_0_3_0() { return cRefPinCrossReference_0_0_3_0; }

		//PhdlID
		public RuleCall getRefPinPhdlIDParserRuleCall_0_0_3_0_1() { return cRefPinPhdlIDParserRuleCall_0_0_3_0_1; }

		//slices=Slices?
		public Assignment getSlicesAssignment_0_0_4() { return cSlicesAssignment_0_0_4; }

		//Slices
		public RuleCall getSlicesSlicesParserRuleCall_0_0_4_0() { return cSlicesSlicesParserRuleCall_0_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_0_5() { return cRightParenthesisKeyword_0_0_5; }

		//qualifier=Qualifier? ref=[Pin|PhdlID] slices=Slices?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//qualifier=Qualifier?
		public Assignment getQualifierAssignment_0_1_0() { return cQualifierAssignment_0_1_0; }

		//Qualifier
		public RuleCall getQualifierQualifierParserRuleCall_0_1_0_0() { return cQualifierQualifierParserRuleCall_0_1_0_0; }

		//ref=[Pin|PhdlID]
		public Assignment getRefAssignment_0_1_1() { return cRefAssignment_0_1_1; }

		//[Pin|PhdlID]
		public CrossReference getRefPinCrossReference_0_1_1_0() { return cRefPinCrossReference_0_1_1_0; }

		//PhdlID
		public RuleCall getRefPinPhdlIDParserRuleCall_0_1_1_0_1() { return cRefPinPhdlIDParserRuleCall_0_1_1_0_1; }

		//slices=Slices?
		public Assignment getSlicesAssignment_0_1_2() { return cSlicesAssignment_0_1_2; }

		//Slices
		public RuleCall getSlicesSlicesParserRuleCall_0_1_2_0() { return cSlicesSlicesParserRuleCall_0_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//concatenation=Concatenation
		public Assignment getConcatenationAssignment_2() { return cConcatenationAssignment_2; }

		//Concatenation
		public RuleCall getConcatenationConcatenationParserRuleCall_2_0() { return cConcatenationConcatenationParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class SubAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualifierQualifierParserRuleCall_0_0 = (RuleCall)cQualifierAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cRefReferenceableCrossReference_1_0_0 = (CrossReference)cRefAssignment_1_0.eContents().get(0);
		private final RuleCall cRefReferenceableIDTerminalRuleCall_1_0_0_1 = (RuleCall)cRefReferenceableCrossReference_1_0_0.eContents().get(1);
		private final Assignment cRefIndicesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRefIndicesIndicesParserRuleCall_1_1_0 = (RuleCall)cRefIndicesAssignment_1_1.eContents().get(0);
		private final Assignment cTailAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTailRefTailParserRuleCall_2_0 = (RuleCall)cTailAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SubAttr:
		//	qualifier=Qualifier? (ref=[Referenceable] refIndices=Indices?) tail=RefTail "=" value=STRING ";";
		public ParserRule getRule() { return rule; }

		//qualifier=Qualifier? (ref=[Referenceable] refIndices=Indices?) tail=RefTail "=" value=STRING ";"
		public Group getGroup() { return cGroup; }

		//qualifier=Qualifier?
		public Assignment getQualifierAssignment_0() { return cQualifierAssignment_0; }

		//Qualifier
		public RuleCall getQualifierQualifierParserRuleCall_0_0() { return cQualifierQualifierParserRuleCall_0_0; }

		//ref=[Referenceable] refIndices=Indices?
		public Group getGroup_1() { return cGroup_1; }

		//ref=[Referenceable]
		public Assignment getRefAssignment_1_0() { return cRefAssignment_1_0; }

		//[Referenceable]
		public CrossReference getRefReferenceableCrossReference_1_0_0() { return cRefReferenceableCrossReference_1_0_0; }

		//ID
		public RuleCall getRefReferenceableIDTerminalRuleCall_1_0_0_1() { return cRefReferenceableIDTerminalRuleCall_1_0_0_1; }

		//refIndices=Indices?
		public Assignment getRefIndicesAssignment_1_1() { return cRefIndicesAssignment_1_1; }

		//Indices
		public RuleCall getRefIndicesIndicesParserRuleCall_1_1_0() { return cRefIndicesIndicesParserRuleCall_1_1_0; }

		//tail=RefTail
		public Assignment getTailAssignment_2() { return cTailAssignment_2; }

		//RefTail
		public RuleCall getTailRefTailParserRuleCall_2_0() { return cTailRefTailParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=STRING
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_0() { return cValueSTRINGTerminalRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class RefTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RefTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefReferenceableCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefReferenceableIDTerminalRuleCall_1_0_1 = (RuleCall)cRefReferenceableCrossReference_1_0.eContents().get(1);
		private final Assignment cRefIndicesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefIndicesIndicesParserRuleCall_2_0 = (RuleCall)cRefIndicesAssignment_2.eContents().get(0);
		private final Assignment cTailAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTailRefTailParserRuleCall_3_0 = (RuleCall)cTailAssignment_3.eContents().get(0);
		
		//RefTail:
		//	"." ref=[Referenceable] refIndices=Indices? tail=RefTail?;
		public ParserRule getRule() { return rule; }

		//"." ref=[Referenceable] refIndices=Indices? tail=RefTail?
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//ref=[Referenceable]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[Referenceable]
		public CrossReference getRefReferenceableCrossReference_1_0() { return cRefReferenceableCrossReference_1_0; }

		//ID
		public RuleCall getRefReferenceableIDTerminalRuleCall_1_0_1() { return cRefReferenceableIDTerminalRuleCall_1_0_1; }

		//refIndices=Indices?
		public Assignment getRefIndicesAssignment_2() { return cRefIndicesAssignment_2; }

		//Indices
		public RuleCall getRefIndicesIndicesParserRuleCall_2_0() { return cRefIndicesIndicesParserRuleCall_2_0; }

		//tail=RefTail?
		public Assignment getTailAssignment_3() { return cTailAssignment_3; }

		//RefTail
		public RuleCall getTailRefTailParserRuleCall_3_0() { return cTailRefTailParserRuleCall_3_0; }
	}

	public class PortAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cCombinedAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Keyword cCombinedCombineKeyword_0_0_0_0 = (Keyword)cCombinedAssignment_0_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cQualifierAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cQualifierQualifierParserRuleCall_0_0_2_0 = (RuleCall)cQualifierAssignment_0_0_2.eContents().get(0);
		private final Assignment cRefAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final CrossReference cRefConnectionNameCrossReference_0_0_3_0 = (CrossReference)cRefAssignment_0_0_3.eContents().get(0);
		private final RuleCall cRefConnectionNamePhdlIDParserRuleCall_0_0_3_0_1 = (RuleCall)cRefConnectionNameCrossReference_0_0_3_0.eContents().get(1);
		private final Assignment cSlicesAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cSlicesSlicesParserRuleCall_0_0_4_0 = (RuleCall)cSlicesAssignment_0_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_5 = (Keyword)cGroup_0_0.eContents().get(5);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cQualifierAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cQualifierQualifierParserRuleCall_0_1_0_0 = (RuleCall)cQualifierAssignment_0_1_0.eContents().get(0);
		private final Assignment cRefAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cRefConnectionNameCrossReference_0_1_1_0 = (CrossReference)cRefAssignment_0_1_1.eContents().get(0);
		private final RuleCall cRefConnectionNamePhdlIDParserRuleCall_0_1_1_0_1 = (RuleCall)cRefConnectionNameCrossReference_0_1_1_0.eContents().get(1);
		private final Assignment cSlicesAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cSlicesSlicesParserRuleCall_0_1_2_0 = (RuleCall)cSlicesAssignment_0_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConcatenationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConcatenationConcatenationParserRuleCall_2_0 = (RuleCall)cConcatenationAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PortAssign:
		//	(combined?="combine" "(" qualifier=Qualifier? ref=[ConnectionName|PhdlID] slices=Slices? ")" | qualifier=Qualifier?
		//	ref=[ConnectionName|PhdlID] slices=Slices?) "=" concatenation=Concatenation ";";
		public ParserRule getRule() { return rule; }

		//(combined?="combine" "(" qualifier=Qualifier? ref=[ConnectionName|PhdlID] slices=Slices? ")" | qualifier=Qualifier?
		//ref=[ConnectionName|PhdlID] slices=Slices?) "=" concatenation=Concatenation ";"
		public Group getGroup() { return cGroup; }

		//combined?="combine" "(" qualifier=Qualifier? ref=[ConnectionName|PhdlID] slices=Slices? ")" | qualifier=Qualifier?
		//ref=[ConnectionName|PhdlID] slices=Slices?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//combined?="combine" "(" qualifier=Qualifier? ref=[ConnectionName|PhdlID] slices=Slices? ")"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//combined?="combine"
		public Assignment getCombinedAssignment_0_0_0() { return cCombinedAssignment_0_0_0; }

		//"combine"
		public Keyword getCombinedCombineKeyword_0_0_0_0() { return cCombinedCombineKeyword_0_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0_1() { return cLeftParenthesisKeyword_0_0_1; }

		//qualifier=Qualifier?
		public Assignment getQualifierAssignment_0_0_2() { return cQualifierAssignment_0_0_2; }

		//Qualifier
		public RuleCall getQualifierQualifierParserRuleCall_0_0_2_0() { return cQualifierQualifierParserRuleCall_0_0_2_0; }

		//ref=[ConnectionName|PhdlID]
		public Assignment getRefAssignment_0_0_3() { return cRefAssignment_0_0_3; }

		//[ConnectionName|PhdlID]
		public CrossReference getRefConnectionNameCrossReference_0_0_3_0() { return cRefConnectionNameCrossReference_0_0_3_0; }

		//PhdlID
		public RuleCall getRefConnectionNamePhdlIDParserRuleCall_0_0_3_0_1() { return cRefConnectionNamePhdlIDParserRuleCall_0_0_3_0_1; }

		//slices=Slices?
		public Assignment getSlicesAssignment_0_0_4() { return cSlicesAssignment_0_0_4; }

		//Slices
		public RuleCall getSlicesSlicesParserRuleCall_0_0_4_0() { return cSlicesSlicesParserRuleCall_0_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_0_5() { return cRightParenthesisKeyword_0_0_5; }

		//qualifier=Qualifier? ref=[ConnectionName|PhdlID] slices=Slices?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//qualifier=Qualifier?
		public Assignment getQualifierAssignment_0_1_0() { return cQualifierAssignment_0_1_0; }

		//Qualifier
		public RuleCall getQualifierQualifierParserRuleCall_0_1_0_0() { return cQualifierQualifierParserRuleCall_0_1_0_0; }

		//ref=[ConnectionName|PhdlID]
		public Assignment getRefAssignment_0_1_1() { return cRefAssignment_0_1_1; }

		//[ConnectionName|PhdlID]
		public CrossReference getRefConnectionNameCrossReference_0_1_1_0() { return cRefConnectionNameCrossReference_0_1_1_0; }

		//PhdlID
		public RuleCall getRefConnectionNamePhdlIDParserRuleCall_0_1_1_0_1() { return cRefConnectionNamePhdlIDParserRuleCall_0_1_1_0_1; }

		//slices=Slices?
		public Assignment getSlicesAssignment_0_1_2() { return cSlicesAssignment_0_1_2; }

		//Slices
		public RuleCall getSlicesSlicesParserRuleCall_0_1_2_0() { return cSlicesSlicesParserRuleCall_0_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//concatenation=Concatenation
		public Assignment getConcatenationAssignment_2() { return cConcatenationAssignment_2; }

		//Concatenation
		public RuleCall getConcatenationConcatenationParserRuleCall_2_0() { return cConcatenationConcatenationParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ConnectionAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectionAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefConnectionNameCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefConnectionNamePhdlIDParserRuleCall_0_0_1 = (RuleCall)cRefConnectionNameCrossReference_0_0.eContents().get(1);
		private final Assignment cSlicesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSlicesSlicesParserRuleCall_1_0 = (RuleCall)cSlicesAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConcatenationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConcatenationConcatenationParserRuleCall_3_0 = (RuleCall)cConcatenationAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConnectionAssign:
		//	ref=[ConnectionName|PhdlID] slices=Slices? "=" concatenation=Concatenation ";";
		public ParserRule getRule() { return rule; }

		//ref=[ConnectionName|PhdlID] slices=Slices? "=" concatenation=Concatenation ";"
		public Group getGroup() { return cGroup; }

		//ref=[ConnectionName|PhdlID]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[ConnectionName|PhdlID]
		public CrossReference getRefConnectionNameCrossReference_0_0() { return cRefConnectionNameCrossReference_0_0; }

		//PhdlID
		public RuleCall getRefConnectionNamePhdlIDParserRuleCall_0_0_1() { return cRefConnectionNamePhdlIDParserRuleCall_0_0_1; }

		//slices=Slices?
		public Assignment getSlicesAssignment_1() { return cSlicesAssignment_1; }

		//Slices
		public RuleCall getSlicesSlicesParserRuleCall_1_0() { return cSlicesSlicesParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//concatenation=Concatenation
		public Assignment getConcatenationAssignment_3() { return cConcatenationAssignment_3; }

		//Concatenation
		public RuleCall getConcatenationConcatenationParserRuleCall_3_0() { return cConcatenationConcatenationParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ConcatenationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Concatenation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cConnectionsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cConnectionsConnectionRefParserRuleCall_0_0_0 = (RuleCall)cConnectionsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cAmpersandKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cConnectionsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cConnectionsConnectionRefParserRuleCall_0_1_1_0 = (RuleCall)cConnectionsAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cReplicatedAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cReplicatedLessThanSignKeyword_1_0_0 = (Keyword)cReplicatedAssignment_1_0.eContents().get(0);
		private final Assignment cReplicateAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cReplicateConnectionRefParserRuleCall_1_1_0 = (RuleCall)cReplicateAssignment_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOpenAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cOpenOpenKeyword_2_0 = (Keyword)cOpenAssignment_2.eContents().get(0);
		
		//Concatenation:
		//	connections+=ConnectionRef ("&" connections+=ConnectionRef)* | replicated?="<" replicate=ConnectionRef ">" |
		//	open?="open";
		public ParserRule getRule() { return rule; }

		//connections+=ConnectionRef ("&" connections+=ConnectionRef)* | replicated?="<" replicate=ConnectionRef ">" |
		//open?="open"
		public Alternatives getAlternatives() { return cAlternatives; }

		//connections+=ConnectionRef ("&" connections+=ConnectionRef)*
		public Group getGroup_0() { return cGroup_0; }

		//connections+=ConnectionRef
		public Assignment getConnectionsAssignment_0_0() { return cConnectionsAssignment_0_0; }

		//ConnectionRef
		public RuleCall getConnectionsConnectionRefParserRuleCall_0_0_0() { return cConnectionsConnectionRefParserRuleCall_0_0_0; }

		//("&" connections+=ConnectionRef)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"&"
		public Keyword getAmpersandKeyword_0_1_0() { return cAmpersandKeyword_0_1_0; }

		//connections+=ConnectionRef
		public Assignment getConnectionsAssignment_0_1_1() { return cConnectionsAssignment_0_1_1; }

		//ConnectionRef
		public RuleCall getConnectionsConnectionRefParserRuleCall_0_1_1_0() { return cConnectionsConnectionRefParserRuleCall_0_1_1_0; }

		//replicated?="<" replicate=ConnectionRef ">"
		public Group getGroup_1() { return cGroup_1; }

		//replicated?="<"
		public Assignment getReplicatedAssignment_1_0() { return cReplicatedAssignment_1_0; }

		//"<"
		public Keyword getReplicatedLessThanSignKeyword_1_0_0() { return cReplicatedLessThanSignKeyword_1_0_0; }

		//replicate=ConnectionRef
		public Assignment getReplicateAssignment_1_1() { return cReplicateAssignment_1_1; }

		//ConnectionRef
		public RuleCall getReplicateConnectionRefParserRuleCall_1_1_0() { return cReplicateConnectionRefParserRuleCall_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }

		//open?="open"
		public Assignment getOpenAssignment_2() { return cOpenAssignment_2; }

		//"open"
		public Keyword getOpenOpenKeyword_2_0() { return cOpenOpenKeyword_2_0; }
	}

	public class ConnectionRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectionRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefConnectionNameCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefConnectionNamePhdlIDParserRuleCall_0_0_1 = (RuleCall)cRefConnectionNameCrossReference_0_0.eContents().get(1);
		private final Assignment cSlicesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSlicesSlicesParserRuleCall_1_0 = (RuleCall)cSlicesAssignment_1.eContents().get(0);
		
		//ConnectionRef:
		//	ref=[ConnectionName|PhdlID] slices=Slices?;
		public ParserRule getRule() { return rule; }

		//ref=[ConnectionName|PhdlID] slices=Slices?
		public Group getGroup() { return cGroup; }

		//ref=[ConnectionName|PhdlID]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[ConnectionName|PhdlID]
		public CrossReference getRefConnectionNameCrossReference_0_0() { return cRefConnectionNameCrossReference_0_0; }

		//PhdlID
		public RuleCall getRefConnectionNamePhdlIDParserRuleCall_0_0_1() { return cRefConnectionNamePhdlIDParserRuleCall_0_0_1; }

		//slices=Slices?
		public Assignment getSlicesAssignment_1() { return cSlicesAssignment_1; }

		//Slices
		public RuleCall getSlicesSlicesParserRuleCall_1_0() { return cSlicesSlicesParserRuleCall_1_0; }
	}

	public class ConnectionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectionName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePhdlIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ConnectionName:
		//	name=PhdlID;
		public ParserRule getRule() { return rule; }

		//name=PhdlID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//PhdlID
		public RuleCall getNamePhdlIDParserRuleCall_0() { return cNamePhdlIDParserRuleCall_0; }
	}

	public class IndicesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Indices");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cMsbAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cMsbINTTerminalRuleCall_1_0_0_0 = (RuleCall)cMsbAssignment_1_0_0.eContents().get(0);
		private final Assignment cArrayAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cArrayColonKeyword_1_0_1_0 = (Keyword)cArrayAssignment_1_0_1.eContents().get(0);
		private final Assignment cLsbAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cLsbINTTerminalRuleCall_1_0_2_0 = (RuleCall)cLsbAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cIndicesAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cIndicesINTTerminalRuleCall_1_1_0_0 = (RuleCall)cIndicesAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cIndicesAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cIndicesINTTerminalRuleCall_1_1_1_1_0 = (RuleCall)cIndicesAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Indices:
		//	"(" (msb=INT array?=":" lsb=INT | indices+=INT ("," indices+=INT)*) ")";
		public ParserRule getRule() { return rule; }

		//"(" (msb=INT array?=":" lsb=INT | indices+=INT ("," indices+=INT)*) ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//msb=INT array?=":" lsb=INT | indices+=INT ("," indices+=INT)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//msb=INT array?=":" lsb=INT
		public Group getGroup_1_0() { return cGroup_1_0; }

		//msb=INT
		public Assignment getMsbAssignment_1_0_0() { return cMsbAssignment_1_0_0; }

		//INT
		public RuleCall getMsbINTTerminalRuleCall_1_0_0_0() { return cMsbINTTerminalRuleCall_1_0_0_0; }

		//array?=":"
		public Assignment getArrayAssignment_1_0_1() { return cArrayAssignment_1_0_1; }

		//":"
		public Keyword getArrayColonKeyword_1_0_1_0() { return cArrayColonKeyword_1_0_1_0; }

		//lsb=INT
		public Assignment getLsbAssignment_1_0_2() { return cLsbAssignment_1_0_2; }

		//INT
		public RuleCall getLsbINTTerminalRuleCall_1_0_2_0() { return cLsbINTTerminalRuleCall_1_0_2_0; }

		//indices+=INT ("," indices+=INT)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//indices+=INT
		public Assignment getIndicesAssignment_1_1_0() { return cIndicesAssignment_1_1_0; }

		//INT
		public RuleCall getIndicesINTTerminalRuleCall_1_1_0_0() { return cIndicesINTTerminalRuleCall_1_1_0_0; }

		//("," indices+=INT)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//indices+=INT
		public Assignment getIndicesAssignment_1_1_1_1() { return cIndicesAssignment_1_1_1_1; }

		//INT
		public RuleCall getIndicesINTTerminalRuleCall_1_1_1_1_0() { return cIndicesINTTerminalRuleCall_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class SlicesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Slices");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cMsbAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cMsbINTTerminalRuleCall_1_0_0_0 = (RuleCall)cMsbAssignment_1_0_0.eContents().get(0);
		private final Assignment cVectorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cVectorColonKeyword_1_0_1_0 = (Keyword)cVectorAssignment_1_0_1.eContents().get(0);
		private final Assignment cLsbAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cLsbINTTerminalRuleCall_1_0_2_0 = (RuleCall)cLsbAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cSlicesAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cSlicesINTTerminalRuleCall_1_1_0_0 = (RuleCall)cSlicesAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cSlicesAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cSlicesINTTerminalRuleCall_1_1_1_1_0 = (RuleCall)cSlicesAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Slices:
		//	"[" (msb=INT vector?=":" lsb=INT | slices+=INT ("," slices+=INT)*) "]";
		public ParserRule getRule() { return rule; }

		//"[" (msb=INT vector?=":" lsb=INT | slices+=INT ("," slices+=INT)*) "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//msb=INT vector?=":" lsb=INT | slices+=INT ("," slices+=INT)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//msb=INT vector?=":" lsb=INT
		public Group getGroup_1_0() { return cGroup_1_0; }

		//msb=INT
		public Assignment getMsbAssignment_1_0_0() { return cMsbAssignment_1_0_0; }

		//INT
		public RuleCall getMsbINTTerminalRuleCall_1_0_0_0() { return cMsbINTTerminalRuleCall_1_0_0_0; }

		//vector?=":"
		public Assignment getVectorAssignment_1_0_1() { return cVectorAssignment_1_0_1; }

		//":"
		public Keyword getVectorColonKeyword_1_0_1_0() { return cVectorColonKeyword_1_0_1_0; }

		//lsb=INT
		public Assignment getLsbAssignment_1_0_2() { return cLsbAssignment_1_0_2; }

		//INT
		public RuleCall getLsbINTTerminalRuleCall_1_0_2_0() { return cLsbINTTerminalRuleCall_1_0_2_0; }

		//slices+=INT ("," slices+=INT)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//slices+=INT
		public Assignment getSlicesAssignment_1_1_0() { return cSlicesAssignment_1_1_0; }

		//INT
		public RuleCall getSlicesINTTerminalRuleCall_1_1_0_0() { return cSlicesINTTerminalRuleCall_1_1_0_0; }

		//("," slices+=INT)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//slices+=INT
		public Assignment getSlicesAssignment_1_1_1_1() { return cSlicesAssignment_1_1_1_1; }

		//INT
		public RuleCall getSlicesINTTerminalRuleCall_1_1_1_1_0() { return cSlicesINTTerminalRuleCall_1_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMsbAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMsbINTTerminalRuleCall_1_1_0 = (RuleCall)cMsbAssignment_1_1.eContents().get(0);
		private final Assignment cVectorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cVectorColonKeyword_1_2_0 = (Keyword)cVectorAssignment_1_2.eContents().get(0);
		private final Assignment cLsbAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cLsbINTTerminalRuleCall_1_3_0 = (RuleCall)cLsbAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Vector:
		//	{Vector} ("[" msb=INT vector?=":" lsb=INT "]")?;
		public ParserRule getRule() { return rule; }

		//{Vector} ("[" msb=INT vector?=":" lsb=INT "]")?
		public Group getGroup() { return cGroup; }

		//{Vector}
		public Action getVectorAction_0() { return cVectorAction_0; }

		//("[" msb=INT vector?=":" lsb=INT "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//msb=INT
		public Assignment getMsbAssignment_1_1() { return cMsbAssignment_1_1; }

		//INT
		public RuleCall getMsbINTTerminalRuleCall_1_1_0() { return cMsbINTTerminalRuleCall_1_1_0; }

		//vector?=":"
		public Assignment getVectorAssignment_1_2() { return cVectorAssignment_1_2; }

		//":"
		public Keyword getVectorColonKeyword_1_2_0() { return cVectorColonKeyword_1_2_0; }

		//lsb=INT
		public Assignment getLsbAssignment_1_3() { return cLsbAssignment_1_3; }

		//INT
		public RuleCall getLsbINTTerminalRuleCall_1_3_0() { return cLsbINTTerminalRuleCall_1_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMsbAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMsbINTTerminalRuleCall_1_1_0 = (RuleCall)cMsbAssignment_1_1.eContents().get(0);
		private final Assignment cArrayAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cArrayColonKeyword_1_2_0 = (Keyword)cArrayAssignment_1_2.eContents().get(0);
		private final Assignment cLsbAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cLsbINTTerminalRuleCall_1_3_0 = (RuleCall)cLsbAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Array:
		//	{Array} ("(" msb=INT array?=":" lsb=INT ")")?;
		public ParserRule getRule() { return rule; }

		//{Array} ("(" msb=INT array?=":" lsb=INT ")")?
		public Group getGroup() { return cGroup; }

		//{Array}
		public Action getArrayAction_0() { return cArrayAction_0; }

		//("(" msb=INT array?=":" lsb=INT ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//msb=INT
		public Assignment getMsbAssignment_1_1() { return cMsbAssignment_1_1; }

		//INT
		public RuleCall getMsbINTTerminalRuleCall_1_1_0() { return cMsbINTTerminalRuleCall_1_1_0; }

		//array?=":"
		public Assignment getArrayAssignment_1_2() { return cArrayAssignment_1_2; }

		//":"
		public Keyword getArrayColonKeyword_1_2_0() { return cArrayColonKeyword_1_2_0; }

		//lsb=INT
		public Assignment getLsbAssignment_1_3() { return cLsbAssignment_1_3; }

		//INT
		public RuleCall getLsbINTTerminalRuleCall_1_3_0() { return cLsbINTTerminalRuleCall_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class QualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Qualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndicesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndicesIndicesParserRuleCall_1_0 = (RuleCall)cIndicesAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Qualifier:
		//	"this" indices=Indices ".";
		public ParserRule getRule() { return rule; }

		//"this" indices=Indices "."
		public Group getGroup() { return cGroup; }

		//"this"
		public Keyword getThisKeyword_0() { return cThisKeyword_0; }

		//indices=Indices
		public Assignment getIndicesAssignment_1() { return cIndicesAssignment_1; }

		//Indices
		public RuleCall getIndicesIndicesParserRuleCall_1_0() { return cIndicesIndicesParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}

	public class ReferenceableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Referenceable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstanceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNewAttrParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRefAttrParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Referenceable:
		//	Instance | Attr | NewAttr | RefAttr;
		public ParserRule getRule() { return rule; }

		//Instance | Attr | NewAttr | RefAttr
		public Alternatives getAlternatives() { return cAlternatives; }

		//Instance
		public RuleCall getInstanceParserRuleCall_0() { return cInstanceParserRuleCall_0; }

		//Attr
		public RuleCall getAttrParserRuleCall_1() { return cAttrParserRuleCall_1; }

		//NewAttr
		public RuleCall getNewAttrParserRuleCall_2() { return cNewAttrParserRuleCall_2; }

		//RefAttr
		public RuleCall getRefAttrParserRuleCall_3() { return cRefAttrParserRuleCall_3; }
	}

	public class AssignableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPinAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPortAssignParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConnectionAssignParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Assignable:
		//	PinAssign | PortAssign | ConnectionAssign;
		public ParserRule getRule() { return rule; }

		//PinAssign | PortAssign | ConnectionAssign
		public Alternatives getAlternatives() { return cAlternatives; }

		//PinAssign
		public RuleCall getPinAssignParserRuleCall_0() { return cPinAssignParserRuleCall_0; }

		//PortAssign
		public RuleCall getPortAssignParserRuleCall_1() { return cPortAssignParserRuleCall_1; }

		//ConnectionAssign
		public RuleCall getConnectionAssignParserRuleCall_2() { return cConnectionAssignParserRuleCall_2; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPhdlIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPhdlIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	PhdlID ("." PhdlID)?;
		public ParserRule getRule() { return rule; }

		//PhdlID ("." PhdlID)?
		public Group getGroup() { return cGroup; }

		//PhdlID
		public RuleCall getPhdlIDParserRuleCall_0() { return cPhdlIDParserRuleCall_0; }

		//("." PhdlID)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//PhdlID
		public RuleCall getPhdlIDParserRuleCall_1_1() { return cPhdlIDParserRuleCall_1_1; }
	}

	public class PhdlIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PhdlID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPINNUMTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PhdlID:
		//	INT | ID | PINNUM;
		public ParserRule getRule() { return rule; }

		//INT | ID | PINNUM
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//PINNUM
		public RuleCall getPINNUMTerminalRuleCall_2() { return cPINNUMTerminalRuleCall_2; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	
	
	public class PinTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PinType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPinEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPinPinKeyword_0_0 = (Keyword)cPinEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInputEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInputInpinKeyword_1_0 = (Keyword)cInputEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOutputEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOutputOutpinKeyword_2_0 = (Keyword)cOutputEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cInOutEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cInOutIopinKeyword_3_0 = (Keyword)cInOutEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPowerEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPowerPwrpinKeyword_4_0 = (Keyword)cPowerEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSupplyEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSupplySuppinKeyword_5_0 = (Keyword)cSupplyEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cOpenCollectorEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cOpenCollectorOcpinKeyword_6_0 = (Keyword)cOpenCollectorEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cOpenEmitterEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cOpenEmitterOepinKeyword_7_0 = (Keyword)cOpenEmitterEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cTristateEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cTristateTripinKeyword_8_0 = (Keyword)cTristateEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cPassiveEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cPassivePasspinKeyword_9_0 = (Keyword)cPassiveEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cNoConnectEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cNoConnectNcpinKeyword_10_0 = (Keyword)cNoConnectEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum PinType:
		//	Pin="pin" | Input="inpin" | Output="outpin" | InOut="iopin" | Power="pwrpin" | Supply="suppin" | OpenCollector="ocpin"
		//	| OpenEmitter="oepin" | Tristate="tripin" | Passive="passpin" | NoConnect="ncpin";
		public EnumRule getRule() { return rule; }

		//Pin="pin" | Input="inpin" | Output="outpin" | InOut="iopin" | Power="pwrpin" | Supply="suppin" | OpenCollector="ocpin" |
		//OpenEmitter="oepin" | Tristate="tripin" | Passive="passpin" | NoConnect="ncpin"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Pin="pin"
		public EnumLiteralDeclaration getPinEnumLiteralDeclaration_0() { return cPinEnumLiteralDeclaration_0; }

		//"pin"
		public Keyword getPinPinKeyword_0_0() { return cPinPinKeyword_0_0; }

		//Input="inpin"
		public EnumLiteralDeclaration getInputEnumLiteralDeclaration_1() { return cInputEnumLiteralDeclaration_1; }

		//"inpin"
		public Keyword getInputInpinKeyword_1_0() { return cInputInpinKeyword_1_0; }

		//Output="outpin"
		public EnumLiteralDeclaration getOutputEnumLiteralDeclaration_2() { return cOutputEnumLiteralDeclaration_2; }

		//"outpin"
		public Keyword getOutputOutpinKeyword_2_0() { return cOutputOutpinKeyword_2_0; }

		//InOut="iopin"
		public EnumLiteralDeclaration getInOutEnumLiteralDeclaration_3() { return cInOutEnumLiteralDeclaration_3; }

		//"iopin"
		public Keyword getInOutIopinKeyword_3_0() { return cInOutIopinKeyword_3_0; }

		//Power="pwrpin"
		public EnumLiteralDeclaration getPowerEnumLiteralDeclaration_4() { return cPowerEnumLiteralDeclaration_4; }

		//"pwrpin"
		public Keyword getPowerPwrpinKeyword_4_0() { return cPowerPwrpinKeyword_4_0; }

		//Supply="suppin"
		public EnumLiteralDeclaration getSupplyEnumLiteralDeclaration_5() { return cSupplyEnumLiteralDeclaration_5; }

		//"suppin"
		public Keyword getSupplySuppinKeyword_5_0() { return cSupplySuppinKeyword_5_0; }

		//OpenCollector="ocpin"
		public EnumLiteralDeclaration getOpenCollectorEnumLiteralDeclaration_6() { return cOpenCollectorEnumLiteralDeclaration_6; }

		//"ocpin"
		public Keyword getOpenCollectorOcpinKeyword_6_0() { return cOpenCollectorOcpinKeyword_6_0; }

		//OpenEmitter="oepin"
		public EnumLiteralDeclaration getOpenEmitterEnumLiteralDeclaration_7() { return cOpenEmitterEnumLiteralDeclaration_7; }

		//"oepin"
		public Keyword getOpenEmitterOepinKeyword_7_0() { return cOpenEmitterOepinKeyword_7_0; }

		//Tristate="tripin"
		public EnumLiteralDeclaration getTristateEnumLiteralDeclaration_8() { return cTristateEnumLiteralDeclaration_8; }

		//"tripin"
		public Keyword getTristateTripinKeyword_8_0() { return cTristateTripinKeyword_8_0; }

		//Passive="passpin"
		public EnumLiteralDeclaration getPassiveEnumLiteralDeclaration_9() { return cPassiveEnumLiteralDeclaration_9; }

		//"passpin"
		public Keyword getPassivePasspinKeyword_9_0() { return cPassivePasspinKeyword_9_0; }

		//NoConnect="ncpin"
		public EnumLiteralDeclaration getNoConnectEnumLiteralDeclaration_10() { return cNoConnectEnumLiteralDeclaration_10; }

		//"ncpin"
		public Keyword getNoConnectNcpinKeyword_10_0() { return cNoConnectNcpinKeyword_10_0; }
	}
	
	private PhdlModelElements pPhdlModel;
	private PackageElements pPackage;
	private ImportElements pImport;
	private DeviceElements pDevice;
	private DeviceElementElements pDeviceElement;
	private AttrElements pAttr;
	private PinElements pPin;
	private InfoElements pInfo;
	private DesignElements pDesign;
	private DesignElementElements pDesignElement;
	private ConnectionElements pConnection;
	private NetElementElements pNetElement;
	private PortElementElements pPortElement;
	private InstanceElements pInstance;
	private InstanceElementElements pInstanceElement;
	private SubInstanceElementElements pSubInstanceElement;
	private RefAttrElements pRefAttr;
	private NewAttrElements pNewAttr;
	private PinAssignElements pPinAssign;
	private SubAttrElements pSubAttr;
	private RefTailElements pRefTail;
	private PortAssignElements pPortAssign;
	private ConnectionAssignElements pConnectionAssign;
	private ConcatenationElements pConcatenation;
	private ConnectionRefElements pConnectionRef;
	private ConnectionNameElements pConnectionName;
	private IndicesElements pIndices;
	private SlicesElements pSlices;
	private VectorElements pVector;
	private ArrayElements pArray;
	private QualifierElements pQualifier;
	private ReferenceableElements pReferenceable;
	private AssignableElements pAssignable;
	private PinTypeElements unknownRulePinType;
	private QualifiedNameElements pQualifiedName;
	private PhdlIDElements pPhdlID;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tPINNUM;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public PhdlGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//PhdlModel:
	//	imports+=Import* (packages+=Package | devices+=Device | designs+=Design)*;
	public PhdlModelElements getPhdlModelAccess() {
		return (pPhdlModel != null) ? pPhdlModel : (pPhdlModel = new PhdlModelElements());
	}
	
	public ParserRule getPhdlModelRule() {
		return getPhdlModelAccess().getRule();
	}

	//Package:
	//	"package" name=ID "{" imports+=Import* (devices+=Device | designs+=Design)* "}";
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Device:
	//	"device" name=PhdlID "{" elements+=DeviceElement* "}";
	public DeviceElements getDeviceAccess() {
		return (pDevice != null) ? pDevice : (pDevice = new DeviceElements());
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}

	//DeviceElement:
	//	Attr | Pin | Info;
	public DeviceElementElements getDeviceElementAccess() {
		return (pDeviceElement != null) ? pDeviceElement : (pDeviceElement = new DeviceElementElements());
	}
	
	public ParserRule getDeviceElementRule() {
		return getDeviceElementAccess().getRule();
	}

	//Attr:
	//	"attr" name=ID "=" value=STRING ";";
	public AttrElements getAttrAccess() {
		return (pAttr != null) ? pAttr : (pAttr = new AttrElements());
	}
	
	public ParserRule getAttrRule() {
		return getAttrAccess().getRule();
	}

	//Pin:
	//	type=PinType vector=Vector name=PhdlID "=" "{" (pinNames+=PhdlID ("," pinNames+=PhdlID)*)? "}" ";";
	public PinElements getPinAccess() {
		return (pPin != null) ? pPin : (pPin = new PinElements());
	}
	
	public ParserRule getPinRule() {
		return getPinAccess().getRule();
	}

	//Info:
	//	"info" "{" info=STRING "}";
	public InfoElements getInfoAccess() {
		return (pInfo != null) ? pInfo : (pInfo = new InfoElements());
	}
	
	public ParserRule getInfoRule() {
		return getInfoAccess().getRule();
	}

	//Design:
	//	(design?="design" | subdesign?="subdesign") name=ID "{" elements+=DesignElement* "}";
	public DesignElements getDesignAccess() {
		return (pDesign != null) ? pDesign : (pDesign = new DesignElements());
	}
	
	public ParserRule getDesignRule() {
		return getDesignAccess().getRule();
	}

	//DesignElement:
	//	Connection | Instance | ConnectionAssign | Info;
	public DesignElementElements getDesignElementAccess() {
		return (pDesignElement != null) ? pDesignElement : (pDesignElement = new DesignElementElements());
	}
	
	public ParserRule getDesignElementRule() {
		return getDesignElementAccess().getRule();
	}

	//Connection:
	//	net?="net" vector=Vector names+=ConnectionName ("," names+=ConnectionName)* ("{" elements+=NetElement* "}" | ";") |
	//	port?="port" vector=Vector names+=ConnectionName ("," names+=ConnectionName)* ("{" elements+=PortElement* "}" | ";");
	public ConnectionElements getConnectionAccess() {
		return (pConnection != null) ? pConnection : (pConnection = new ConnectionElements());
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}

	//NetElement:
	//	Attr | Info;
	public NetElementElements getNetElementAccess() {
		return (pNetElement != null) ? pNetElement : (pNetElement = new NetElementElements());
	}
	
	public ParserRule getNetElementRule() {
		return getNetElementAccess().getRule();
	}

	//PortElement:
	//	Info;
	public PortElementElements getPortElementAccess() {
		return (pPortElement != null) ? pPortElement : (pPortElement = new PortElementElements());
	}
	
	public ParserRule getPortElementRule() {
		return getPortElementAccess().getRule();
	}

	//Instance:
	//	inst?="inst" array=Array name=ID "of" device=[Device|QualifiedName] "{" elements+=InstanceElement* "}" |
	//	subInst?="subinst" array=Array name=ID "of" subDesign=[Design|QualifiedName] prefix=STRING? "{"
	//	elements+=SubInstanceElement* "}";
	public InstanceElements getInstanceAccess() {
		return (pInstance != null) ? pInstance : (pInstance = new InstanceElements());
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}

	//InstanceElement:
	//	NewAttr | RefAttr | PinAssign | Info;
	public InstanceElementElements getInstanceElementAccess() {
		return (pInstanceElement != null) ? pInstanceElement : (pInstanceElement = new InstanceElementElements());
	}
	
	public ParserRule getInstanceElementRule() {
		return getInstanceElementAccess().getRule();
	}

	//SubInstanceElement:
	//	Attr | SubAttr | PortAssign | Info;
	public SubInstanceElementElements getSubInstanceElementAccess() {
		return (pSubInstanceElement != null) ? pSubInstanceElement : (pSubInstanceElement = new SubInstanceElementElements());
	}
	
	public ParserRule getSubInstanceElementRule() {
		return getSubInstanceElementAccess().getRule();
	}

	//RefAttr:
	//	qualifier=Qualifier? ref=[Attr] "=" value=STRING ";";
	public RefAttrElements getRefAttrAccess() {
		return (pRefAttr != null) ? pRefAttr : (pRefAttr = new RefAttrElements());
	}
	
	public ParserRule getRefAttrRule() {
		return getRefAttrAccess().getRule();
	}

	//NewAttr:
	//	"newattr" qualifier=Qualifier? name=ID "=" value=STRING ";";
	public NewAttrElements getNewAttrAccess() {
		return (pNewAttr != null) ? pNewAttr : (pNewAttr = new NewAttrElements());
	}
	
	public ParserRule getNewAttrRule() {
		return getNewAttrAccess().getRule();
	}

	//PinAssign:
	//	(combined?="combine" "(" qualifier=Qualifier? ref=[Pin|PhdlID] slices=Slices? ")" | qualifier=Qualifier?
	//	ref=[Pin|PhdlID] slices=Slices?) "=" concatenation=Concatenation ";";
	public PinAssignElements getPinAssignAccess() {
		return (pPinAssign != null) ? pPinAssign : (pPinAssign = new PinAssignElements());
	}
	
	public ParserRule getPinAssignRule() {
		return getPinAssignAccess().getRule();
	}

	//SubAttr:
	//	qualifier=Qualifier? (ref=[Referenceable] refIndices=Indices?) tail=RefTail "=" value=STRING ";";
	public SubAttrElements getSubAttrAccess() {
		return (pSubAttr != null) ? pSubAttr : (pSubAttr = new SubAttrElements());
	}
	
	public ParserRule getSubAttrRule() {
		return getSubAttrAccess().getRule();
	}

	//RefTail:
	//	"." ref=[Referenceable] refIndices=Indices? tail=RefTail?;
	public RefTailElements getRefTailAccess() {
		return (pRefTail != null) ? pRefTail : (pRefTail = new RefTailElements());
	}
	
	public ParserRule getRefTailRule() {
		return getRefTailAccess().getRule();
	}

	//PortAssign:
	//	(combined?="combine" "(" qualifier=Qualifier? ref=[ConnectionName|PhdlID] slices=Slices? ")" | qualifier=Qualifier?
	//	ref=[ConnectionName|PhdlID] slices=Slices?) "=" concatenation=Concatenation ";";
	public PortAssignElements getPortAssignAccess() {
		return (pPortAssign != null) ? pPortAssign : (pPortAssign = new PortAssignElements());
	}
	
	public ParserRule getPortAssignRule() {
		return getPortAssignAccess().getRule();
	}

	//ConnectionAssign:
	//	ref=[ConnectionName|PhdlID] slices=Slices? "=" concatenation=Concatenation ";";
	public ConnectionAssignElements getConnectionAssignAccess() {
		return (pConnectionAssign != null) ? pConnectionAssign : (pConnectionAssign = new ConnectionAssignElements());
	}
	
	public ParserRule getConnectionAssignRule() {
		return getConnectionAssignAccess().getRule();
	}

	//Concatenation:
	//	connections+=ConnectionRef ("&" connections+=ConnectionRef)* | replicated?="<" replicate=ConnectionRef ">" |
	//	open?="open";
	public ConcatenationElements getConcatenationAccess() {
		return (pConcatenation != null) ? pConcatenation : (pConcatenation = new ConcatenationElements());
	}
	
	public ParserRule getConcatenationRule() {
		return getConcatenationAccess().getRule();
	}

	//ConnectionRef:
	//	ref=[ConnectionName|PhdlID] slices=Slices?;
	public ConnectionRefElements getConnectionRefAccess() {
		return (pConnectionRef != null) ? pConnectionRef : (pConnectionRef = new ConnectionRefElements());
	}
	
	public ParserRule getConnectionRefRule() {
		return getConnectionRefAccess().getRule();
	}

	//ConnectionName:
	//	name=PhdlID;
	public ConnectionNameElements getConnectionNameAccess() {
		return (pConnectionName != null) ? pConnectionName : (pConnectionName = new ConnectionNameElements());
	}
	
	public ParserRule getConnectionNameRule() {
		return getConnectionNameAccess().getRule();
	}

	//Indices:
	//	"(" (msb=INT array?=":" lsb=INT | indices+=INT ("," indices+=INT)*) ")";
	public IndicesElements getIndicesAccess() {
		return (pIndices != null) ? pIndices : (pIndices = new IndicesElements());
	}
	
	public ParserRule getIndicesRule() {
		return getIndicesAccess().getRule();
	}

	//Slices:
	//	"[" (msb=INT vector?=":" lsb=INT | slices+=INT ("," slices+=INT)*) "]";
	public SlicesElements getSlicesAccess() {
		return (pSlices != null) ? pSlices : (pSlices = new SlicesElements());
	}
	
	public ParserRule getSlicesRule() {
		return getSlicesAccess().getRule();
	}

	//Vector:
	//	{Vector} ("[" msb=INT vector?=":" lsb=INT "]")?;
	public VectorElements getVectorAccess() {
		return (pVector != null) ? pVector : (pVector = new VectorElements());
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	//Array:
	//	{Array} ("(" msb=INT array?=":" lsb=INT ")")?;
	public ArrayElements getArrayAccess() {
		return (pArray != null) ? pArray : (pArray = new ArrayElements());
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//Qualifier:
	//	"this" indices=Indices ".";
	public QualifierElements getQualifierAccess() {
		return (pQualifier != null) ? pQualifier : (pQualifier = new QualifierElements());
	}
	
	public ParserRule getQualifierRule() {
		return getQualifierAccess().getRule();
	}

	//Referenceable:
	//	Instance | Attr | NewAttr | RefAttr;
	public ReferenceableElements getReferenceableAccess() {
		return (pReferenceable != null) ? pReferenceable : (pReferenceable = new ReferenceableElements());
	}
	
	public ParserRule getReferenceableRule() {
		return getReferenceableAccess().getRule();
	}

	//Assignable:
	//	PinAssign | PortAssign | ConnectionAssign;
	public AssignableElements getAssignableAccess() {
		return (pAssignable != null) ? pAssignable : (pAssignable = new AssignableElements());
	}
	
	public ParserRule getAssignableRule() {
		return getAssignableAccess().getRule();
	}

	//enum PinType:
	//	Pin="pin" | Input="inpin" | Output="outpin" | InOut="iopin" | Power="pwrpin" | Supply="suppin" | OpenCollector="ocpin"
	//	| OpenEmitter="oepin" | Tristate="tripin" | Passive="passpin" | NoConnect="ncpin";
	public PinTypeElements getPinTypeAccess() {
		return (unknownRulePinType != null) ? unknownRulePinType : (unknownRulePinType = new PinTypeElements());
	}
	
	public EnumRule getPinTypeRule() {
		return getPinTypeAccess().getRule();
	}

	//QualifiedName:
	//	PhdlID ("." PhdlID)?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//PhdlID:
	//	INT | ID | PINNUM;
	public PhdlIDElements getPhdlIDAccess() {
		return (pPhdlID != null) ? pPhdlID : (pPhdlID = new PhdlIDElements());
	}
	
	public ParserRule getPhdlIDRule() {
		return getPhdlIDAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" | "1".."9" "0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal PINNUM:
	//	("0".."9" | "a".."z" | "A".."Z" | "_" | "+" | "-" | "$" | "/" | "@")+;
	public TerminalRule getPINNUMRule() {
		return (tPINNUM != null) ? tPINNUM : (tPINNUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PINNUM"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	////terminal DOC_COMMENT: '/ **' -> '* /';
	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	////terminal UNCLOSED_COMMENT: '/ *' (!EOF)* EOF; terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
