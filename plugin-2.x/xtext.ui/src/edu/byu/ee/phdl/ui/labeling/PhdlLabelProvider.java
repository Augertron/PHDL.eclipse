/*
 * generated by Xtext
 */
package edu.byu.ee.phdl.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

import edu.byu.ee.phdl.phdl.Attr;
import edu.byu.ee.phdl.phdl.Connection;
import edu.byu.ee.phdl.phdl.ConnectionName;
import edu.byu.ee.phdl.phdl.Design;
import edu.byu.ee.phdl.phdl.Device;
import edu.byu.ee.phdl.phdl.Import;
import edu.byu.ee.phdl.phdl.Instance;
import edu.byu.ee.phdl.phdl.Package;
import edu.byu.ee.phdl.phdl.PhdlModel;
import edu.byu.ee.phdl.phdl.Pin;
import edu.byu.ee.phdl.phdl.PinAssign;
import edu.byu.ee.phdl.phdl.RefAttr;
import edu.byu.ee.phdl.utils.PhdlUtils;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class PhdlLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public PhdlLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	public String image(Attr a) {
		return "Attr.gif";
	}

	public String image(Connection c) {
		if (c.isNet())
			return "Net.gif";
		else
			return "Port.gif";
	}

	public String image(ConnectionName n) {
		if (((Connection) n.eContainer()).isNet())
			return "Net.gif";
		else
			return "Port.gif";
	}

	public String image(Design d) {
		if (d.isDesign())
			return "Design.gif";
		else
			return "SubDesign.gif";
	}

	public String image(Device d) {
		return "Device.gif";
	}

	public String image(Import i) {
		return "Import.gif";
	}

	public String image(Instance i) {
		if (i.isInst())
			return "Device.gif";
		else
			return "SubDesign.gif";
	}

	public String image(Package p) {
		return "Package.gif";
	}

	public String image(PhdlModel p) {
		return "PhdlModel.gif";
	}

	public String image(Pin p) {
		if (p.getVector().isVector() && (Math.abs(p.getVector().getMsb() - p.getVector().getLsb()) != 0))
			return "Pin_Array.gif";
		else
			return "Pin.gif";
	}

	/*
	 * public StyledString text(Connection c) { StyledString string = new StyledString(c.isNet() ?
	 * "Net" : "Port"); String array = c.getVector().isVector() ? (" [" + c.getVector().getMsb() +
	 * ":" + c.getVector().getLsb() + "]") : ""; string.append(array, StyledString.COUNTER_STYLER);
	 * String qualifier = " : "; for (ConnectionName n : c.getNames()) qualifier += n.getName() +
	 * ", "; qualifier = qualifier.substring(0, qualifier.length() - 2); return
	 * string.append(qualifier, StyledString.QUALIFIER_STYLER); }
	 */

	public String image(RefAttr a) {
		return "Attr.gif";
	}

	public StyledString text(Attr a) {
		StyledString string = new StyledString(a.getName());
		String qualifier = " : " + a.getValue();
		return string.append(qualifier, StyledString.QUALIFIER_STYLER);
	}

	public StyledString text(ConnectionName n) {
		int msb = ((Connection) n.eContainer()).getVector().getMsb();
		int lsb = ((Connection) n.eContainer()).getVector().getLsb();
		String array = ((Connection) n.eContainer()).getVector().isVector() ? (" [" + msb + ":" + lsb + "]") : "";
		StyledString string = new StyledString(n.getName());
		String qualifier = " : " + ((Design) n.eContainer().eContainer()).getName();
		return string.append(array, StyledString.COUNTER_STYLER).append(qualifier, StyledString.QUALIFIER_STYLER);
	}

	public StyledString text(Design d) {
		StyledString string = new StyledString(d.getName());
		String qualifier;
		if (d.eContainer() instanceof Package)
			qualifier = " : " + ((Package) d.eContainer()).getName();
		else
			qualifier = " : (global)";
		return string.append(qualifier, StyledString.QUALIFIER_STYLER);
	}

	public StyledString text(Device d) {
		StyledString string = new StyledString(d.getName());
		String qualifier;
		if (d.eContainer() instanceof Package)
			qualifier = " : " + ((Package) d.eContainer()).getName();
		else
			qualifier = " : (global)";
		return string.append(qualifier, StyledString.QUALIFIER_STYLER);
	}

	public StyledString text(Import i) {
		StyledString string = new StyledString(i.getImportedNamespace());
		String qualifier;
		if (i.eContainer() instanceof Package)
			qualifier = " : " + ((Package) i.eContainer()).getName();
		else
			qualifier = " : (global)";
		return string.append(qualifier, StyledString.QUALIFIER_STYLER);
	}

	public StyledString text(Instance i) {
		StyledString string = new StyledString(i.getName());
		String array = i.getArray().isArray() ? (" (" + i.getArray().getMsb() + ":" + i.getArray().getLsb() + ")") : "";
		string.append(array, StyledString.COUNTER_STYLER);
		if (i.getDevice() != null)
			string.append(" : " + i.getDevice().getName(), StyledString.QUALIFIER_STYLER);
		return string;
	}

	public StyledString text(PhdlModel p) {
		StyledString string = new StyledString(p.eResource().getURI().lastSegment());
		return string.append(" (Resource)", StyledString.QUALIFIER_STYLER);
	}

	public StyledString text(Pin p) {
		StyledString string = new StyledString(p.getName());
		String array;
		if (PhdlUtils.getIndices(p.getVector().getMsb(), p.getVector().getLsb()).size() != p.getPinNames().size())
			array = p.getVector().isVector() ? (" [" + p.getVector().getMsb() + ":" + p.getVector().getLsb() + "]") : "";
		else
			array = (p.getVector().isVector() ? (" [" + p.getVector().getMsb() + ":" + p.getVector().getLsb() + "]") : (" ("
					+ p.getPinNames().get(0) + ")"));
		string.append(array, StyledString.COUNTER_STYLER);
		String qualifier = " : " + p.getType().getName();
		return string.append(qualifier, StyledString.QUALIFIER_STYLER);
	}

	public StyledString text(PinAssign p) {
		StyledString string = new StyledString();
		return string;
	}

	public StyledString text(RefAttr a) {
		StyledString string = new StyledString();
		if (a.getRef().getName() != null)
			string.append(a.getRef().getName());
		string.append(" : " + a.getValue(), StyledString.QUALIFIER_STYLER);
		return string;
	}

}
