/*
 * generated by Xtext
 */
package edu.byu.ee.phdl.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

import edu.byu.ee.phdl.services.PhdlGrammarAccess;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.ArrayElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.AttrElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.ConcatenationElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.ConnectionAssignElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.ConnectionElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.DesignElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.DeviceElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.ImportElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.IndicesElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.InstanceElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.NewAttrElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.PackageElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.PinAssignElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.PinElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.PortAssignElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.QualifierElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.RefAttrElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.RefTailElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.SlicesElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.SubAttrElements;
import edu.byu.ee.phdl.services.PhdlGrammarAccess.VectorElements;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class PhdlFormatter extends AbstractDeclarativeFormatter {

	@Override
	protected void configureFormatting(FormattingConfig config) {

		PhdlGrammarAccess access = (PhdlGrammarAccess) getGrammarAccess();
		config.setAutoLinewrap(80);

		formatImports(config, access);
		formatPackages(config, access);
		formatDevices(config, access);
		formatDesigns(config, access);

		// format all comments
		config.setLinewrap(0, 1, 2).around(access.getSL_COMMENTRule());
		config.setLinewrap(0, 1, 2).around(access.getML_COMMENTRule());
	}

	private void formatArrays(FormattingConfig config, PhdlGrammarAccess access) {
		ArrayElements elements = access.getArrayAccess();
		config.setNoSpace().around(elements.getLeftParenthesisKeyword_1_0());
		config.setNoSpace().around(elements.getArrayColonKeyword_1_2_0());
		config.setNoSpace().before(elements.getRightParenthesisKeyword_1_4());
	}

	private void formatAttributes(FormattingConfig config, PhdlGrammarAccess access) {
		AttrElements elements = access.getAttrAccess();
		config.setNoSpace().after(elements.getValueAssignment_3());
		config.setLinewrap(1, 1, 2).after(elements.getGroup());
		config.setLinewrap(1).between(elements.getRule(), elements.getRule());
	}

	private void formatConcatenations(FormattingConfig config, PhdlGrammarAccess access) {
		ConcatenationElements elements = access.getConcatenationAccess();
		config.setNoSpace().around(elements.getReplicateAssignment_2_1());
		config.setSpace(" ").around(elements.getAmpersandKeyword_1_1_0());
		config.setNoSpace().before(elements.getCommaKeyword_0_2_0());
		config.setNoSpace().after(elements.getLeftCurlyBracketKeyword_0_0());
		config.setNoSpace().before(elements.getRightCurlyBracketKeyword_0_3());
	}

	private void formatConnectionAssigns(FormattingConfig config, PhdlGrammarAccess access) {
		ConnectionAssignElements elements = access.getConnectionAssignAccess();
		config.setNoSpace().before(elements.getSemicolonKeyword_4());
		config.setSpace(" ").around(elements.getEqualsSignKeyword_2());
	}

	private void formatConnections(FormattingConfig config, PhdlGrammarAccess access) {
		ConnectionElements elements = access.getConnectionAccess();
		config.setNoSpace().before(elements.getCommaKeyword_0_3_0());
		config.setNoSpace().before(elements.getCommaKeyword_1_3_0());
		config.setNoSpace().before(elements.getSemicolonKeyword_0_4_1());
		config.setNoSpace().before(elements.getSemicolonKeyword_1_4_1());
		config.setLinewrap(1).after(elements.getSemicolonKeyword_0_4_1());
		config.setLinewrap(1).after(elements.getSemicolonKeyword_1_4_1());
		config.setLinewrap(1, 1, 2).after(elements.getLeftCurlyBracketKeyword_0_4_0_0());
		config.setLinewrap(1).before(elements.getRightCurlyBracketKeyword_0_4_0_2());
		config.setLinewrap(1, 2, 2).after(elements.getRightCurlyBracketKeyword_0_4_0_2());
		config.setIndentationIncrement().after(elements.getLeftCurlyBracketKeyword_0_4_0_0());
		config.setIndentationDecrement().before(elements.getRightCurlyBracketKeyword_0_4_0_2());
	}

	private void formatDesigns(FormattingConfig config, PhdlGrammarAccess access) {
		config.setLinewrap(1, 2, 2).around(access.getDesignRule());
		config.setLinewrap(1, 2, 2).around(access.getDesignElementRule());
		DesignElements elements = access.getDesignAccess();
		config.setLinewrap(1, 1, 2).after(elements.getLeftCurlyBracketKeyword_2());
		config.setLinewrap(1).before(elements.getRightCurlyBracketKeyword_4());
		config.setLinewrap(1, 2, 2).after(elements.getRightCurlyBracketKeyword_4());
		config.setIndentationIncrement().after(elements.getLeftCurlyBracketKeyword_2());
		config.setIndentationDecrement().before(elements.getRightCurlyBracketKeyword_4());
		formatInstances(config, access);
		formatConnections(config, access);
		formatConcatenations(config, access);
		formatIndices(config, access);
		formatSlices(config, access);
		formatQualifiers(config, access);
		formatArrays(config, access);
		formatConnectionAssigns(config, access);
	}

	private void formatDevices(FormattingConfig config, PhdlGrammarAccess access) {
		config.setLinewrap(1, 2, 2).around(access.getDeviceRule());
		DeviceElements elements = access.getDeviceAccess();
		config.setLinewrap(1, 1, 2).after(elements.getLeftCurlyBracketKeyword_2());
		config.setLinewrap(1).before(elements.getRightCurlyBracketKeyword_4());
		config.setIndentationIncrement().after(elements.getLeftCurlyBracketKeyword_2());
		config.setIndentationDecrement().before(elements.getRightCurlyBracketKeyword_4());
		config.setLinewrap(1, 2, 2).between(access.getAttrRule(), access.getPinRule());
		config.setLinewrap(1, 2, 2).after(elements.getRightCurlyBracketKeyword_4());
		config.setLinewrap(1, 1, 2).between(access.getDeviceElementRule(), access.getDeviceElementRule());
		formatAttributes(config, access);
		formatPins(config, access);
	}

	private void formatImports(FormattingConfig config, PhdlGrammarAccess access) {
		config.setLinewrap(1, 2, 2).around(access.getImportRule());
		ImportElements elements = access.getImportAccess();
		config.setNoSpace().before(elements.getSemicolonKeyword_2());
		config.setLinewrap(1, 1, 2).after(elements.getSemicolonKeyword_2());
		config.setLinewrap(2).between(access.getImportRule(), access.getPhdlModelAccess().getGroup());
		config.setLinewrap(2).between(access.getImportRule(), access.getPackageAccess().getGroup());
	}

	private void formatIndices(FormattingConfig config, PhdlGrammarAccess access) {
		IndicesElements elements = access.getIndicesAccess();
		config.setNoSpace().around(elements.getLeftParenthesisKeyword_0());
		config.setNoSpace().around(elements.getRightParenthesisKeyword_2());
		config.setNoSpace().around(elements.getArrayColonKeyword_1_0_1_0());
		config.setNoSpace().around(elements.getCommaKeyword_1_1_1_0());
	}

	private void formatInstances(FormattingConfig config, PhdlGrammarAccess access) {
		InstanceElements elements = access.getInstanceAccess();
		config.setLinewrap(1, 1, 2).after(elements.getLeftCurlyBracketKeyword_0_5());
		config.setLinewrap(1, 1, 2).after(elements.getLeftCurlyBracketKeyword_1_6());
		config.setLinewrap(1).before(elements.getRightCurlyBracketKeyword_0_7());
		config.setLinewrap(1).before(elements.getRightCurlyBracketKeyword_1_8());
		config.setIndentationIncrement().after(elements.getLeftCurlyBracketKeyword_0_5());
		config.setIndentationIncrement().after(elements.getLeftCurlyBracketKeyword_1_6());
		config.setIndentationDecrement().before(elements.getRightCurlyBracketKeyword_0_7());
		config.setIndentationDecrement().before(elements.getRightCurlyBracketKeyword_1_8());
		config.setLinewrap(1, 1, 2).between(access.getInstanceElementRule(), access.getInstanceElementRule());
		formatRefAttrs(config, access);
		formatNewAttrs(config, access);
		formatPinAssigns(config, access);
		formatSubAttrs(config, access);
		formatPortAssigns(config, access);
	}

	private void formatNewAttrs(FormattingConfig config, PhdlGrammarAccess access) {
		NewAttrElements elements = access.getNewAttrAccess();
		config.setNoSpace().before(elements.getSemicolonKeyword_5());
		config.setLinewrap(1, 1, 2).after(elements.getSemicolonKeyword_5());
		config.setLinewrap(1).between(access.getNewAttrRule(), access.getNewAttrRule());
	}

	private void formatPackages(FormattingConfig config, PhdlGrammarAccess access) {
		config.setLinewrap(1, 2, 2).around(access.getPackageRule());
		PackageElements elements = access.getPackageAccess();
		config.setLinewrap(1, 1, 2).after(elements.getLeftCurlyBracketKeyword_2());
		config.setLinewrap(1).before(elements.getRightCurlyBracketKeyword_5());
		config.setIndentationIncrement().after(elements.getLeftCurlyBracketKeyword_2());
		config.setIndentationDecrement().before(elements.getRightCurlyBracketKeyword_5());
	}

	private void formatPinAssigns(FormattingConfig config, PhdlGrammarAccess access) {
		PinAssignElements elements = access.getPinAssignAccess();
		config.setSpace(" ").around(elements.getEqualsSignKeyword_1());
		config.setNoSpace().around(elements.getLeftParenthesisKeyword_0_0_1());
		config.setNoSpace().around(elements.getRightParenthesisKeyword_0_0_5());
		config.setNoSpace().before(elements.getSemicolonKeyword_3());
		config.setLinewrap(1).after(elements.getSemicolonKeyword_3());
	}

	private void formatPins(FormattingConfig config, PhdlGrammarAccess access) {
		config.setLinewrap(1).between(access.getPinRule(), access.getPinRule());
		PinElements elements = access.getPinAccess();
		config.setSpace(" ").around(elements.getEqualsSignKeyword_3());
		config.setSpace(" ").around(elements.getNameAssignment_2());
		config.setNoSpace().after(elements.getLeftCurlyBracketKeyword_4());
		config.setNoSpace().before(elements.getRightCurlyBracketKeyword_6());
		config.setNoSpace().around(elements.getCommaKeyword_5_1_0());
		config.setNoSpace().before(elements.getSemicolonKeyword_7());
		config.setLinewrap(1).after(elements.getSemicolonKeyword_7());
		formatPinWidths(config, access);
	}

	private void formatPinWidths(FormattingConfig config, PhdlGrammarAccess access) {
		VectorElements elements = access.getVectorAccess();
		config.setNoSpace().before(elements.getLeftSquareBracketKeyword_1_0());
		config.setNoSpace().after(elements.getLeftSquareBracketKeyword_1_0());
		config.setNoSpace().before(elements.getVectorColonKeyword_1_2_0());
		config.setNoSpace().after(elements.getVectorColonKeyword_1_2_0());
		config.setNoSpace().before(elements.getRightSquareBracketKeyword_1_4());
	}

	private void formatPortAssigns(FormattingConfig config, PhdlGrammarAccess access) {
		PortAssignElements elements = access.getPortAssignAccess();
		config.setSpace(" ").around(elements.getEqualsSignKeyword_1());
		config.setNoSpace().around(elements.getLeftParenthesisKeyword_0_0_1());
		config.setNoSpace().around(elements.getRightParenthesisKeyword_0_0_5());
		config.setNoSpace().before(elements.getSemicolonKeyword_3());
		config.setLinewrap(1).after(elements.getSemicolonKeyword_3());
	}

	private void formatQualifiers(FormattingConfig config, PhdlGrammarAccess access) {
		QualifierElements elements = access.getQualifierAccess();
		config.setNoSpace().after(elements.getFullStopKeyword_2());
	}

	private void formatRefAttrs(FormattingConfig config, PhdlGrammarAccess access) {
		RefAttrElements elements = access.getRefAttrAccess();
		config.setNoSpace().before(elements.getSemicolonKeyword_4());
		config.setLinewrap(1, 1, 2).after(elements.getSemicolonKeyword_4());
		config.setLinewrap(1).between(access.getRefAttrRule(), access.getRefAttrRule());
	}

	private void formatRefTails(FormattingConfig config, PhdlGrammarAccess access) {
		RefTailElements elements = access.getRefTailAccess();
		config.setNoSpace().around(elements.getFullStopKeyword_0());
	}

	private void formatSlices(FormattingConfig config, PhdlGrammarAccess access) {
		SlicesElements elements = access.getSlicesAccess();
		config.setNoSpace().around(elements.getLeftSquareBracketKeyword_0());
		config.setNoSpace().around(elements.getRightSquareBracketKeyword_2());
		config.setNoSpace().around(elements.getVectorColonKeyword_1_0_1_0());
		config.setNoSpace().around(elements.getCommaKeyword_1_1_1_0());
	}

	private void formatSubAttrs(FormattingConfig config, PhdlGrammarAccess access) {
		SubAttrElements elements = access.getSubAttrAccess();
		config.setSpace(" ").around(elements.getEqualsSignKeyword_3());
		config.setNoSpace().before(elements.getSemicolonKeyword_5());
		config.setLinewrap(1).after(elements.getSemicolonKeyword_5());
		formatRefTails(config, access);
	}
}
