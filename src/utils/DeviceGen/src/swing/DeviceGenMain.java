/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DeviceGenMain.java
 *
 * Created on Apr 26, 2012, 11:12:17 AM
 */
package swing;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author rablack
 */
public class DeviceGenMain extends javax.swing.JFrame {

    private List<pkg> packages;
    private List<deviceSet> deviceSets;
    private Dimension dim;
    
    /** Creates new form DeviceGenMain */
    public DeviceGenMain() {
        initComponents();
        
        DefaultListModel dlm = new DefaultListModel();
        dim = finalList.getPreferredSize();
        finalList.setModel(dlm);
        finalList.setPreferredSize(dim);
        finalList.setLayoutOrientation(JList.VERTICAL_WRAP);
        
        devList.setModel(new DefaultListModel());
        devList.setLayoutOrientation(JList.VERTICAL);
        
        pkgList.setModel(new DefaultListModel());
        pkgList.setLayoutOrientation(JList.VERTICAL);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filenameField = new javax.swing.JTextField();
        browseBtn = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        devList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        pkgList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        drawing = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        finalList = new javax.swing.JList();
        Generate = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        rstBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        filenameField.setName("filenameField"); // NOI18N

        browseBtn.setText("Browse...");
        browseBtn.setName("browse"); // NOI18N
        browseBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                browseBtnMouseClicked(evt);
            }
        });

        statusLabel.setText("No File Selected");
        statusLabel.setName("statusLabel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        devList.setFont(new java.awt.Font("Courier", 0, 13)); // NOI18N
        devList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        devList.setName("devList"); // NOI18N
        devList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                devListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(devList);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        pkgList.setFont(new java.awt.Font("Courier", 0, 13)); // NOI18N
        pkgList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        pkgList.setName("pkgList"); // NOI18N
        pkgList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pkgListMouseClicked(evt);
            }
        });
        pkgList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                pkgListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(pkgList);

        jLabel1.setText("Devices");
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText("Packages");
        jLabel2.setName("jLabel2"); // NOI18N

        drawing.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.highlight"));
        drawing.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        drawing.setDoubleBuffered(true);
        drawing.setName("drawing"); // NOI18N

        javax.swing.GroupLayout drawingLayout = new javax.swing.GroupLayout(drawing);
        drawing.setLayout(drawingLayout);
        drawingLayout.setHorizontalGroup(
            drawingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
        );
        drawingLayout.setVerticalGroup(
            drawingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 260, Short.MAX_VALUE)
        );

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        finalList.setFont(new java.awt.Font("Courier", 0, 13)); // NOI18N
        finalList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 6", "Item 7", "Item 7", "Item 8", "Item 9", "Item 10" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        finalList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        finalList.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        finalList.setName("finalList"); // NOI18N
        finalList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                finalListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(finalList);

        Generate.setText("Generate Devices");
        Generate.setName("Generate"); // NOI18N
        Generate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GenerateMouseClicked(evt);
            }
        });

        jLabel3.setText("Select a file using \"Browse...\" The \"Devices\" column will be populated with the devices"); // NOI18N
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText("found in the library.  When a device is clicked, its packages populate the \"Packages\"");
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText("column.  Double-clicking on a package will add it to the bottom list.  To remove from");
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setText("the bottom list, double click on the offending item.");
        jLabel6.setName("jLabel6"); // NOI18N

        rstBtn.setText("Reset");
        rstBtn.setName("rstBtn"); // NOI18N
        rstBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rstBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(Generate))
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filenameField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addComponent(browseBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rstBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(statusLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(drawing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filenameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(statusLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))
                            .addComponent(drawing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6))
                            .addComponent(Generate)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rstBtn)
                        .addComponent(browseBtn)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browseBtnMouseClicked
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter ff = new FileNameExtensionFilter("Eagle 6.x+ Libraries (.lbr)", "lbr");
        fc.setFileFilter(ff);
        fc.showDialog(this, "Select");
        File tmp = fc.getSelectedFile();
        if (tmp == null) {
            return;
        }
        filenameField.setText(tmp.getName());
        
        ((DefaultListModel)devList.getModel()).clear();
        ((DefaultListModel)pkgList.getModel()).clear();
        
        if (tmp.getName().endsWith(".lbr")) {
            updateStatus("Valid File, process continuing...", 50, 180, 50);
            if (tmp.canRead()) {
                updateStatus("File readable, continuing process...", 50, 180, 50);
                interpretFile(tmp);
            }
            else {
                updateStatus("File not readable, please change permissions", 255, 0, 0);
            }
        }
        else {
            updateStatus("Invalid File", 255, 0, 0);
        }
    }//GEN-LAST:event_browseBtnMouseClicked

    private void devListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_devListValueChanged
        String dev = (String)devList.getSelectedValue();
        
        int i = 0;
        ((DefaultListModel)pkgList.getModel()).clear();
        
        for (deviceSet d : deviceSets) {
            if (d.name.equals(dev)) {
                for (pkg p : d.packages) {
                    ((DefaultListModel)pkgList.getModel()).add(i++, p.name);
                }
                break;
            }
        }
        pkgList.clearSelection();
    }//GEN-LAST:event_devListValueChanged

    private void pkgListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_pkgListValueChanged
        String pstr = (String)pkgList.getSelectedValue();
        String dstr = (String)devList.getSelectedValue();
        List<String> attrs = null;
        
        for (deviceSet d : deviceSets) {
            if (d.name.equals(dstr)) {
                for (pkg p : d.packages) {
                    if (p.name.equals(pstr)) {
                        attrs = p.attrs;
                        break;
                    }
                }
                break;
            }
        }
        
        Graphics g = drawing.getGraphics();
        int width = drawing.getWidth();
        int height = drawing.getHeight();
        int mid_width = width/2;
        int mid_height = height/2;
        
        
        g.clearRect(0, 0, width, height);
        g.setColor(Color.white);
        g.fillRect(0, 0, width, height);
        
        if (attrs != null) {
            for (String a : attrs) {
                if (a.startsWith("wire")) {
                    int x1 = (int)(getCoord(a.substring("wire".length()), "x1")*7);
                    int x2 = (int)(getCoord(a.substring("wire".length()), "x2")*7);
                    int y1 = (int)(getCoord(a.substring("wire".length()), "y1")*7);
                    int y2 = (int)(getCoord(a.substring("wire".length()), "y2")*7);
                    
                    g.setColor(Color.black);
                    g.drawLine(x1+mid_width, y1+mid_height, x2+mid_width, y2+mid_height);
                }
                else if (a.startsWith("rectangle")) {
                    int x1 = (int)(getCoord(a.substring("rectangle".length()), "x1")*7);
                    int x2 = (int)(getCoord(a.substring("rectangle".length()), "x2")*7);
                    int y1 = (int)(getCoord(a.substring("rectangle".length()), "y1")*7);
                    int y2 = (int)(getCoord(a.substring("rectangle".length()), "y2")*7);
                    
                    g.setColor(Color.black);
                    g.drawRect(x1 + mid_width, y1 + mid_height, Math.abs(x2-x1), Math.abs(y2-y1));
                }
                else if (a.startsWith("circle")) {
                    int x = (int)(getCoord(a.substring("circle".length()), "x")*7);
                    int y = (int)(getCoord(a.substring("circle".length()), "y")*7);
                    int radius = (int)(getCoord(a.substring("circle".length()), "radius")*7);
                    
                    g.setColor(Color.black);
                    g.drawOval(x + mid_width - radius, y + mid_height - radius, radius*2, radius*2);
                }
            }
        }
        drawing.paintComponents(g);
        
    }//GEN-LAST:event_pkgListValueChanged

    private void finalListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_finalListMouseClicked
        if (evt.getClickCount() == 2) {
            int index = finalList.getSelectedIndex();
            if (index != -1) {
                DefaultListModel dlm = (DefaultListModel)finalList.getModel();
                dlm.remove(index);
            }
        }
        adjustLengths();
    }//GEN-LAST:event_finalListMouseClicked

    private void pkgListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pkgListMouseClicked
        if (evt.getClickCount() == 2) {
            String p = (String)pkgList.getSelectedValue();
            String d = (String)devList.getSelectedValue();
            DefaultListModel dlm = (DefaultListModel)finalList.getModel();
            
            for (int i = 0; i < dlm.getSize(); i++) {
                if (((String)dlm.get(i)).startsWith(d)) {
                    Object[] options = {"Replace", "Cancel"};
                    
                    int flag = JOptionPane.showOptionDialog(this,
                            "The device you've selected already has a package "
                            + "assigned to it. \n\n"
                            + "Would you like to replace the previous device package?",
                            "Package Conflict",
                            JOptionPane.WARNING_MESSAGE,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            options,
                            options[1]
                            );
                    
                    if (flag == 0) {
                        dlm.set(i, d + " " + p);
                        adjustLengths();
                    }
                    return;
                }
            }
            
            dlm.add(dlm.getSize(), d + " " + p);
        }
        adjustLengths();
    }//GEN-LAST:event_pkgListMouseClicked

    private void adjustLengths() {
        DefaultListModel dlm = (DefaultListModel)finalList.getModel();
        int max = 0;
        
        for (int i = 0; i < dlm.getSize(); i++) {
            String newstr = (String)dlm.get(i);
            int index = newstr.indexOf(" ");
            if (index > max) {
                max = index;
            }
        }
        
        DefaultListModel dlm2 = new DefaultListModel();
        
        for (int i = 0; i < dlm.getSize(); i++) {
            String newstr = (String)dlm.get(i);
            String[] arr = newstr.trim().split(" ");
            
            int left = max - arr[0].length() + 1;
            String newEntry = arr[0];
            for (int j = 0; j < left; j++) {
                newEntry += " ";
            }
            newEntry += arr[arr.length-1];
            dlm2.add(i, newEntry);
        }
        finalList.setModel(dlm2);
    }
    
    private void GenerateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GenerateMouseClicked
        DefaultListModel dlm = (DefaultListModel)finalList.getModel();
        if (dlm.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "You haven't selected any devices to generate",
                    "Cannot Generate",
                    JOptionPane.WARNING_MESSAGE
                    );
        }
        else {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < dlm.getSize(); i++) {
                sb.append(dlm.get(i) + "\n");
            }
            
            int flag = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to generate devices for the following:\n\n"
                    + sb.toString(),
                    "Confirm Generation",
                    JOptionPane.YES_NO_OPTION);
            if (flag == JOptionPane.YES_OPTION) {
                StringBuilder output = new StringBuilder();
                for (int i = 0; i < dlm.getSize(); i++) {
                    String[] vals = ((String)dlm.get(i)).split(" ");
                    
                    output.append("device ");
                    output.append(vals[0]);
                    output.append(" {\n");
                    
                    deviceSet my_d = null;
                    for (deviceSet d : deviceSets) {
                        if (d.name.equals(vals[0])) {
                            my_d = d;
                            break;
                        }
                    }
                    
                    pkg my_p = null;
                    for (pkg p : my_d.packages) {
                        if (p.name.equals(vals[vals.length-1])) {
                            my_p = p;
                            break;
                        }
                    }
                    
                    output.append("\tattr refPrefix = \"");
                    output.append(my_d.prefix);
                    output.append("\";\n");
                    output.append("\tattr library = \"");
                    
                    if (my_d != null) {
                        output.append(my_d.lib);
                        output.append("\";\n");
                    }
                    
                    output.append("\tattr package = \"");
                    output.append(vals[vals.length-1]);
                    output.append("\";\n");
                    
                    if (my_d.attr) {
                        output.append("\tattr value = \"0\";\n");
                    }
                    
                    for (int j = 0; j < my_p.pins.size(); j++) {
                        output.append("\tpin ");
                        output.append(my_p.pins.get(j));
                        output.append(" = {");
                        output.append(my_p.pads.get(j));
                        output.append("};\n");
                    }
                    output.append("}\n\n");
                }
                
                JFileChooser fc = new JFileChooser() {
                    @Override
                    public void approveSelection(){
                        File f = getSelectedFile();
                        if(f.exists() && getDialogType() == SAVE_DIALOG){
                            int result = JOptionPane.showConfirmDialog(this,"The file exists, overwrite?","Existing file",JOptionPane.YES_NO_CANCEL_OPTION);
                            switch(result){
                                case JOptionPane.YES_OPTION:
                                    super.approveSelection();
                                    return;
                                case JOptionPane.NO_OPTION:
                                    return;
                                case JOptionPane.CANCEL_OPTION:
                                    cancelSelection();
                                    return;
                            }
                        }
                        super.approveSelection();
                    }
                };
                
                String sugFilename = filenameField.getText();
                File sugFile;
                if (!sugFilename.trim().equals("")) {
                    int index = sugFilename.trim().indexOf(".");
                    if (index != -1) {
                        sugFilename = sugFilename.substring(0, index);
                    }
                    sugFile = new File(sugFilename + ".phdl");
                }
                else {
                    sugFile = new File("devices.phdl");
                }
                
                fc.setSelectedFile(sugFile);
                
                FileNameExtensionFilter ff = new FileNameExtensionFilter("PHDL Device Library (.phdl)", ".phdl");
                fc.setFileFilter(ff);
                
                int flag2 = fc.showSaveDialog(this);
                if (flag2 == JFileChooser.CANCEL_OPTION) {
                    return;
                }
                File newFile = fc.getSelectedFile();
                
                if (newFile != null) {
                    try {
                        FileWriter fstream = new FileWriter(newFile);
                        BufferedWriter out = new BufferedWriter(fstream);
                        
                        
                        StringBuilder sb2 = new StringBuilder();
                        sb2.append("/**\n *\t");
                        sb2.append(newFile.getName());
                        sb2.append("\n *\n *\tThese device declarations were ");
                        sb2.append("generated by\n *\tthe DeviceGen utility\n");
                        sb2.append(" *\n *\tDeviceGen (C) 2012 Brigham Young University\n");
                        sb2.append(" *\n *\t@date\t");
                        
                        DateFormat date = new SimpleDateFormat("MMMM/dd/yyyy");
                        Date today = new Date();
                        sb2.append(date.format(today));
                        
                        sb2.append("\n **/\n");
                        
                        out.append(sb2.toString());
                        out.append(output.toString());
                        
                        
                        
                        updateStatus("Saved to " + newFile.toString(), 50, 180, 50);
                        out.close();
                    }
                    catch(java.io.IOException e) {
                        updateStatus("Unable to Save!", 255, 0, 0);
                        return;
                    }
                }
            }
        }
    }//GEN-LAST:event_GenerateMouseClicked

    private void rstBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rstBtnMouseClicked
        filenameField.setText("");
        
        drawing.getGraphics().setColor(Color.white);
        drawing.getGraphics().fillRect(0, 0, drawing.getWidth(), drawing.getHeight());
        drawing.getGraphics().setColor(Color.black);
        
        ((DefaultListModel)finalList.getModel()).clear();
        ((DefaultListModel)pkgList.getModel()).clear();
        ((DefaultListModel)devList.getModel()).clear();
        
        updateStatus("Fields Reset", 50, 180, 50);
    }//GEN-LAST:event_rstBtnMouseClicked

    private float getCoord(String tmp, String delim) {
        String[] attrs = tmp.split("[= ]");
        String c = "0.0";
        for (int i = 0; i < attrs.length; i++) {
            if (attrs[i].trim().equals(delim)) {
                c = attrs[i+1].replaceAll("^\"|\"$", "").trim();
            }
        }
        return Float.parseFloat(c);
    }
    
    private void interpretFile(File file) {
        StringBuilder content = new StringBuilder();
        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            String nextline = "";
            while ((nextline = br.readLine()) != null) {
                content.append(nextline);
            }
            br.close();
            updateStatus("File upload complete...", 50, 180, 50);
            
            getTokens(content);
            
            
            
        }
        catch(java.io.FileNotFoundException e) {
            updateStatus("The file was not found when attempting to open the file", 255, 0, 0);
            return;
        }
        catch(java.io.IOException e) {
            updateStatus("A read error occurred. Go to www.phdl.sf.net for support", 255, 0, 0);
            return;
        }
        
    }
    
    private void getTokens(StringBuilder sb) {
        String[] startTags = sb.toString().split("[<>]");
        StringBuilder tmp = new StringBuilder();
        for (int i = 0; i < startTags.length; i++) {
            String trimmed = startTags[i].trim();
            if (!trimmed.startsWith("?") && !trimmed.startsWith("!") && !trimmed.isEmpty()) {
                if (trimmed.startsWith("eagle")) {
                    i = recordVersion(startTags, i, tmp);
                }
                else if (trimmed.startsWith("packages")) {
                    i = recordPackages(startTags, i, tmp);
                    updateStatus("Packages Recorded...", 50, 180, 50);
                }
                else if (trimmed.startsWith("devicesets")) {
                    i = recordDeviceSets(startTags, i, tmp);
                }
            }
        }
        populateList(tmp);
    }
    
    private void populateList(StringBuilder tmp) {
        int i = 0;
        ((DefaultListModel)devList.getModel()).clear();
        for (deviceSet d : deviceSets) {
            ((DefaultListModel)devList.getModel()).add(i++, d.name);
        }
    }
    
    private int recordVersion(String[] tags, int index, StringBuilder tmp) {
        String[] attrs = tags[index].substring("eagle".length()).split("[= /]");
        for (int i = 0; i < attrs.length; i++) {
            if (attrs[i].trim().equals("version")) {
                updateStatus("Version Recorded as " + attrs[i+1].replaceAll("^\"|\"$", "").trim() + "...", 50, 180, 50);
                float version = Float.parseFloat(attrs[i+1].replaceAll("^\"|\"$", "").trim());
                if (version < 6.0) {
                    updateStatus("Invalid .lbr file-- must be 6.x+", 255, 0, 0);
                }
            }
        }
        return index;
    }
    
    private class pkg implements Comparable {
        private String name;
        private ArrayList<String> attrs;
        private ArrayList<String> pins;
        private ArrayList<String> pads;
        
        public pkg(String name) {
            this.name = name;
            this.attrs = new ArrayList<String>();
            this.pins = new ArrayList<String>();
            this.pads = new ArrayList<String>();
        }
        
        public boolean addAttr(String newattr) {
            return attrs.add(newattr);
        }
        
        public boolean addAllAttr(List newattrs) {
            return attrs.addAll(newattrs);
        }
        
        public boolean addMapping(String pin, String pad) {
            String pin_r = romanizeString(pin);
            if (pins.contains(pin_r)) {
                if (pins.indexOf(pin_r) == pads.indexOf(pad)) {
                    return false;
                }
                else {
                    System.out.println("Error - duplicate pin with different pad");
                }
            }
            else {
                boolean success = pins.add(pin_r);
                success &= pads.add(pad);
                return success;
            }
            return false;
        }
        
        private String romanizeString(String str) {
            str = str.replaceAll("#", "hash");
            str = str.replaceAll("%", "percent");
            str = str.replaceAll("!", "not");
            str = str.replaceAll("@", "at");
            str = str.replaceAll("\\^", "hat");
            str = str.replaceAll("&", "and");
            str = str.replaceAll("\\*", "star");
            str = str.replaceAll("<", "lt");
            str = str.replaceAll(">", "gt");
            str = str.replaceAll("\\?", "qmark");
            str = str.replaceAll("~", "tilde");
            
            char ch = str.charAt(0);
            if (ch >= '0' && ch <= '9') {
                str = "_" + str;
            }
            
            return str;
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("\tattr package = \"" + name + "\";");
            for (String s : attrs) {
                sb.append("\n\tattr ");
                sb.append(s);
            }
             
            for (int i = 0; i < pins.size(); i++) {
                sb.append("\n\tpin ");
                sb.append(pins.get(i));
                sb.append(" = {");
                sb.append(pads.get(i));
                sb.append("};");
            }
            return sb.toString();
        }
        
        public int compareTo(Object o) {
            return name.compareTo((String)o);
        }
        
        @Override
        public boolean equals(Object o) {
            if (o instanceof pkg) {
                return false;
            }
            if (this.compareTo(o) == 0) {
                return true;
            }
            return false;
        }
        
        @Override
        public int hashCode() {
            return this.name.hashCode();
        }
    }
    
    private int recordPackages(String[] tags, int index, StringBuilder tmp) {
        packages = new ArrayList<pkg>();
        pkg newpkg = null;
        for (index += 1 ; index < tags.length; index++) {
            if (tags[index].startsWith("package")) {
                newpkg = new pkg(recordPackageName(tags[index]));
            }
            else if (tags[index].startsWith("wire") || tags[index].startsWith("circle") || tags[index].startsWith("rectangle")) {
                newpkg.addAttr(tags[index]);
            }
            else if (tags[index].startsWith("/packages")) {
                break;
            }
            else if (tags[index].startsWith("/package")) {
                packages.add(newpkg);
                newpkg = null;
            }
        }
        return index+1;
    }
    
    private String recordPackageName(String tag) {
        String[] attrs = tag.substring("package".length()).split("[= ]");
        String name = "";
        for (int i = 0; i < attrs.length; i++) {
            if (attrs[i].trim().equals("name")) {
                name = attrs[i+1].replaceAll("^\"|\"$", "").trim();
                break;
            }
        }
        return name;
    }
    
    private class deviceSet {
        
        private String name;
        private List<pkg> packages;
        private String prefix;
        private boolean attr;
        private String lib;
        
        public deviceSet(String name) {
            this.name = name;
            this.prefix = "";
            this.attr = false;
            this.lib = filenameField.getText().substring(0, filenameField.getText().indexOf('.'));
            packages = new ArrayList<pkg>();
        }
        
        public boolean addPackage(pkg newpkg) {
            return this.packages.add(newpkg);
        }
        
        public void setPrefix(String prefix) {
            this.prefix = prefix;
        }
        
        public void setAttr(boolean attr) {
            this.attr = attr;
        }
        
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("device ");
            sb.append(name);
            sb.append(" {\n");
            sb.append("\tattr refPrefix = \"");
            sb.append(prefix);
            sb.append("\";\n");
            sb.append("\tattr library = \"");
            sb.append(filenameField.getText().substring(0, filenameField.getText().length()));
            sb.append("\";\n");
            for (pkg p : packages) {
                sb.append("\n");
                sb.append(p.toString());
                sb.append("\n");
            }
            sb.append("\n}\n");
            
            return sb.toString();
        }
    }
    
    private int recordDeviceSets(String[] tags, int index, StringBuilder tmp) {
        deviceSet ds = null;
        pkg pk = null;
        deviceSets = new ArrayList<deviceSet>();
        
        for (index += 1; index < tags.length; index++) {
            if (tags[index].trim().startsWith("deviceset")) {
                ds = new deviceSet(recordDSName(tags[index]));
                ds.setPrefix(recordPrefix(tags[index]));
                ds.setAttr(recordAttr(tags[index]));
            }
            else if (tags[index].trim().startsWith("/devicesets")) {
                
            }
            else if (tags[index].trim().startsWith("/deviceset")) {
                deviceSets.add(ds);
                ds = null;
            }
            else if (tags[index].trim().startsWith("devices")) {
                
            }
            else if (tags[index].trim().startsWith("device")) {
                pk = recordPackage(tags[index]);
            }
            else if (tags[index].trim().startsWith("/devices")) {
                
            }
            else if (tags[index].trim().startsWith("/device")) {
                ds.addPackage(pk);
                pk = null;
            }
            else if (tags[index].trim().startsWith("connects")) {
                
            }
            else if (tags[index].trim().startsWith("connect")) {
                String pin = recordPin(tags[index]);
                String pad = recordPad(tags[index]);
                pk.addMapping(pin, pad);
            }
        }
        return index;
    }
    
    private String recordPin(String tag) {
        String[] attrs = tag.substring("connect".length()).split("[= /]");
        String pin = "";
        for (int i = 0; i < attrs.length; i++) {
            if (attrs[i].trim().equals("pin")) {
                pin = attrs[i+1].replaceAll("^\"|\"$", "").trim();
                break;
            }
        }
        return pin;
    }
    
    private String recordPad(String tag) {
        String[] attrs = tag.substring("connect".length()).split("[= /]");
        String pad = "";
        for (int i = 0; i < attrs.length; i++) {
            if (attrs[i].trim().equals("pad")) {
                pad = attrs[i+1].replaceAll("^\"|\"$", "").trim();
                break;
            }
        }
        return pad;
    }
    
    private pkg recordPackage(String tag) {
        String[] attrs = tag.substring("device".length()).split("[= ]");
        String newpkg = "";
        for (int i = 0; i < attrs.length; i++) {
            if (attrs[i].trim().equals("package")) {
                newpkg = attrs[i+1].replaceAll("^\"|\"$", "").trim();
                break;
            }
        }
        int index = -1;
        for (int i = 0; i < packages.size(); i++) {
            if (packages.get(i).equals(newpkg)) {
                index = i;
                break;
            }
        }
        if (index == -1) {
            System.out.println("Error: looking for " + newpkg + " but couldn't find it");
            for (String s : attrs) {
                System.out.println(s);
            }
        }
        
        return packages.get(index);
    }
    
    private String recordDSName(String tag) {
        String[] attrs = tag.substring("deviceset".length()).split("[= /]");
        String name = "";
        for (int i = 0; i < attrs.length; i++) {
            if (attrs[i].trim().equals("name")) {
                name = attrs[i+1].replaceAll("^\"|\"$", "").trim();
                break;
            }
        }
        return name;
    }
    
    private String recordPrefix(String tag) {
        String[] attrs = tag.substring("deviceset".length()).split("[= /]");
        String prefix = "";
        for (int i = 0; i < attrs.length; i++) {
            if (attrs[i].trim().equals("prefix")) {
                prefix = attrs[i+1].replaceAll("^\"|\"$", "").trim();
                break;
            }
        }
        return prefix;
    }
    
    private boolean recordAttr(String tag) {
        String[] attrs = tag.substring("deviceset".length()).split("[= /]");
        String attr = "";
        for (int i = 0; i < attrs.length; i++) {
            if (attrs[i].trim().equals("uservalue")) {
                attr = attrs[i+1].replaceAll("^\"|\"$", "").trim();
                break;
            }
        }
        if (attr.equals("yes"))
            return true;
        return false;
    }
    
    private void updateStatus(String text, int r, int g, int b) {
        statusLabel.setText(text);
        statusLabel.setForeground(new Color(r,g,b));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DeviceGenMain().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Generate;
    private javax.swing.JButton browseBtn;
    private javax.swing.JList devList;
    private javax.swing.JPanel drawing;
    private javax.swing.JTextField filenameField;
    private javax.swing.JList finalList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList pkgList;
    private javax.swing.JButton rstBtn;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
}
